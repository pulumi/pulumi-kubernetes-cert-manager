// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.KubernetesCertManager.Inputs
{

    public sealed class CertManagerGlobalLeaderElectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate.
        /// </summary>
        [Input("leaseDuration")]
        public Input<string>? LeaseDuration { get; set; }

        /// <summary>
        /// Override the namespace used to store the ConfigMap for leader election.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration.
        /// </summary>
        [Input("renewDeadline")]
        public Input<string>? RenewDeadline { get; set; }

        public CertManagerGlobalLeaderElectionArgs()
        {
        }
        public static new CertManagerGlobalLeaderElectionArgs Empty => new CertManagerGlobalLeaderElectionArgs();
    }
}
