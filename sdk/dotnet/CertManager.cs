// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.KubernetesCertManager
{
    /// <summary>
    /// Automates the management and issuance of TLS certificates from various issuing sources within Kubernetes
    /// </summary>
    [KubernetesCertManagerResourceType("kubernetes-cert-manager:index:CertManager")]
    public partial class CertManager : global::Pulumi.ComponentResource
    {
        /// <summary>
        /// Detailed information about the status of the underlying Helm deployment.
        /// </summary>
        [Output("status")]
        public Output<Outputs.ReleaseStatus> Status { get; private set; } = null!;


        /// <summary>
        /// Create a CertManager resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertManager(string name, CertManagerArgs? args = null, ComponentResourceOptions? options = null)
            : base("kubernetes-cert-manager:index:CertManager", name, args ?? new CertManagerArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class CertManagerArgs : global::Pulumi.ResourceArgs
    {
        [Input("affinity")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Core.V1.AffinityArgs>? Affinity { get; set; }

        [Input("cainjector")]
        public Input<Inputs.CertManagerCaInjectorArgs>? Cainjector { get; set; }

        /// <summary>
        /// Override the namespace used to store DNS provider credentials etc. for ClusterIssuer resources. By default, the same namespace as cert-manager is deployed within is used. This namespace will not be automatically created by the Helm chart.
        /// </summary>
        [Input("clusterResourceNamespace")]
        public Input<string>? ClusterResourceNamespace { get; set; }

        /// <summary>
        /// Container Security Context to be set on the controller component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        /// </summary>
        [Input("containerSecurityContext")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Core.V1.SecurityContextArgs>? ContainerSecurityContext { get; set; }

        [Input("deploymentAnnotations")]
        private InputMap<string>? _deploymentAnnotations;

        /// <summary>
        /// Optional additional annotations to add to the controller Deployment
        /// </summary>
        public InputMap<string> DeploymentAnnotations
        {
            get => _deploymentAnnotations ?? (_deploymentAnnotations = new InputMap<string>());
            set => _deploymentAnnotations = value;
        }

        [Input("extraArgs")]
        private InputList<string>? _extraArgs;

        /// <summary>
        /// Optional additional arguments.
        /// </summary>
        public InputList<string> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputList<string>());
            set => _extraArgs = value;
        }

        [Input("extraEnv")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.EnvVarArgs>? _extraEnv;
        public InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.EnvVarArgs> ExtraEnv
        {
            get => _extraEnv ?? (_extraEnv = new InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.EnvVarArgs>());
            set => _extraEnv = value;
        }

        [Input("extraVolumeMounts")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.VolumeMountArgs>? _extraVolumeMounts;
        public InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.VolumeMountArgs> ExtraVolumeMounts
        {
            get => _extraVolumeMounts ?? (_extraVolumeMounts = new InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.VolumeMountArgs>());
            set => _extraVolumeMounts = value;
        }

        [Input("extraVolumes")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.VolumeArgs>? _extraVolumes;
        public InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.VolumeArgs> ExtraVolumes
        {
            get => _extraVolumes ?? (_extraVolumes = new InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.VolumeArgs>());
            set => _extraVolumes = value;
        }

        /// <summary>
        /// Comma separated list of feature gates that should be enabled on the controller pod.
        /// </summary>
        [Input("featureGates")]
        public Input<string>? FeatureGates { get; set; }

        [Input("global")]
        public Input<Inputs.CertManagerGlobalArgs>? Global { get; set; }

        /// <summary>
        /// HelmOptions is an escape hatch that lets the end user control any aspect of the Helm deployment. This exposes the entirety of the underlying Helm Release component args.
        /// </summary>
        [Input("helmOptions")]
        public Inputs.ReleaseArgs? HelmOptions { get; set; }

        [Input("http_proxy")]
        public Input<string>? Http_proxy { get; set; }

        [Input("https_proxy")]
        public Input<string>? Https_proxy { get; set; }

        [Input("image")]
        public Input<Inputs.CertManagerImageArgs>? Image { get; set; }

        [Input("ingressShim")]
        public Input<Inputs.CertManagerIngressShimArgs>? IngressShim { get; set; }

        [Input("installCRDs")]
        public Input<bool>? InstallCRDs { get; set; }

        [Input("no_proxy")]
        private InputList<string>? _no_proxy;
        public InputList<string> No_proxy
        {
            get => _no_proxy ?? (_no_proxy = new InputList<string>());
            set => _no_proxy = value;
        }

        [Input("nodeSelector")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Core.V1.NodeSelectorArgs>? NodeSelector { get; set; }

        [Input("podAnnotations")]
        private InputMap<string>? _podAnnotations;

        /// <summary>
        /// Optional additional annotations to add to the controller Pods
        /// </summary>
        public InputMap<string> PodAnnotations
        {
            get => _podAnnotations ?? (_podAnnotations = new InputMap<string>());
            set => _podAnnotations = value;
        }

        [Input("podDnsConfig")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Core.V1.PodDNSConfigArgs>? PodDnsConfig { get; set; }

        /// <summary>
        /// Optional DNS settings, useful if you have a public and private DNS zone for the same domain on Route 53. What follows is an example of ensuring cert-manager can access an ingress or DNS TXT records at all times. NOTE: This requires Kubernetes 1.10 or `CustomPodDNS` feature gate enabled for the cluster to work.
        /// </summary>
        [Input("podDnsPolicy")]
        public Input<string>? PodDnsPolicy { get; set; }

        [Input("podLabels")]
        private InputMap<string>? _podLabels;
        public InputMap<string> PodLabels
        {
            get => _podLabels ?? (_podLabels = new InputMap<string>());
            set => _podLabels = value;
        }

        [Input("prometheus")]
        public Input<Inputs.CertManagerPrometheusArgs>? Prometheus { get; set; }

        [Input("replicaCount")]
        public Input<int>? ReplicaCount { get; set; }

        [Input("resources")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Core.V1.ResourceRequirementsArgs>? Resources { get; set; }

        /// <summary>
        /// Pod Security Context. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        /// </summary>
        [Input("securityContext")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Core.V1.PodSecurityContextArgs>? SecurityContext { get; set; }

        [Input("serviceAccount")]
        public Input<Inputs.CertManagerServiceAccountArgs>? ServiceAccount { get; set; }

        [Input("serviceAnnotations")]
        private InputMap<string>? _serviceAnnotations;

        /// <summary>
        /// Optional additional annotations to add to the controller service
        /// </summary>
        public InputMap<string> ServiceAnnotations
        {
            get => _serviceAnnotations ?? (_serviceAnnotations = new InputMap<string>());
            set => _serviceAnnotations = value;
        }

        [Input("serviceLabels")]
        private InputMap<string>? _serviceLabels;

        /// <summary>
        /// Optional additional labels to add to the controller Service
        /// </summary>
        public InputMap<string> ServiceLabels
        {
            get => _serviceLabels ?? (_serviceLabels = new InputMap<string>());
            set => _serviceLabels = value;
        }

        [Input("startupapicheck")]
        public Input<Inputs.CertManagerStartupAPICheckArgs>? Startupapicheck { get; set; }

        [Input("strategy")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Apps.V1.DeploymentStrategyArgs>? Strategy { get; set; }

        [Input("tolerations")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.TolerationArgs>? _tolerations;
        public InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.TolerationArgs> Tolerations
        {
            get => _tolerations ?? (_tolerations = new InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.TolerationArgs>());
            set => _tolerations = value;
        }

        [Input("webhook")]
        public Input<Inputs.CertManagerWebhookArgs>? Webhook { get; set; }

        public CertManagerArgs()
        {
        }
        public static new CertManagerArgs Empty => new CertManagerArgs();
    }
}
