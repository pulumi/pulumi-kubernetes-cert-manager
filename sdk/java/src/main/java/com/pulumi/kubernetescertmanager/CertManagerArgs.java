// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetescertmanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.apps.v1.inputs.DeploymentStrategyArgs;
import com.pulumi.kubernetes.core.v1.inputs.AffinityArgs;
import com.pulumi.kubernetes.core.v1.inputs.EnvVarArgs;
import com.pulumi.kubernetes.core.v1.inputs.NodeSelectorArgs;
import com.pulumi.kubernetes.core.v1.inputs.PodDNSConfigArgs;
import com.pulumi.kubernetes.core.v1.inputs.PodSecurityContextArgs;
import com.pulumi.kubernetes.core.v1.inputs.ResourceRequirementsArgs;
import com.pulumi.kubernetes.core.v1.inputs.SecurityContextArgs;
import com.pulumi.kubernetes.core.v1.inputs.TolerationArgs;
import com.pulumi.kubernetes.core.v1.inputs.VolumeArgs;
import com.pulumi.kubernetes.core.v1.inputs.VolumeMountArgs;
import com.pulumi.kubernetescertmanager.inputs.CertManagerCaInjectorArgs;
import com.pulumi.kubernetescertmanager.inputs.CertManagerGlobalArgs;
import com.pulumi.kubernetescertmanager.inputs.CertManagerImageArgs;
import com.pulumi.kubernetescertmanager.inputs.CertManagerIngressShimArgs;
import com.pulumi.kubernetescertmanager.inputs.CertManagerPrometheusArgs;
import com.pulumi.kubernetescertmanager.inputs.CertManagerServiceAccountArgs;
import com.pulumi.kubernetescertmanager.inputs.CertManagerStartupAPICheckArgs;
import com.pulumi.kubernetescertmanager.inputs.CertManagerWebhookArgs;
import com.pulumi.kubernetescertmanager.inputs.ReleaseArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertManagerArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertManagerArgs Empty = new CertManagerArgs();

    @Import(name="affinity")
    private @Nullable Output<AffinityArgs> affinity;

    public Optional<Output<AffinityArgs>> affinity() {
        return Optional.ofNullable(this.affinity);
    }

    @Import(name="cainjector")
    private @Nullable Output<CertManagerCaInjectorArgs> cainjector;

    public Optional<Output<CertManagerCaInjectorArgs>> cainjector() {
        return Optional.ofNullable(this.cainjector);
    }

    /**
     * Override the namespace used to store DNS provider credentials etc. for ClusterIssuer resources. By default, the same namespace as cert-manager is deployed within is used. This namespace will not be automatically created by the Helm chart.
     * 
     */
    @Import(name="clusterResourceNamespace")
    private @Nullable Output<String> clusterResourceNamespace;

    /**
     * @return Override the namespace used to store DNS provider credentials etc. for ClusterIssuer resources. By default, the same namespace as cert-manager is deployed within is used. This namespace will not be automatically created by the Helm chart.
     * 
     */
    public Optional<Output<String>> clusterResourceNamespace() {
        return Optional.ofNullable(this.clusterResourceNamespace);
    }

    /**
     * Container Security Context to be set on the controller component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     * 
     */
    @Import(name="containerSecurityContext")
    private @Nullable Output<SecurityContextArgs> containerSecurityContext;

    /**
     * @return Container Security Context to be set on the controller component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     * 
     */
    public Optional<Output<SecurityContextArgs>> containerSecurityContext() {
        return Optional.ofNullable(this.containerSecurityContext);
    }

    /**
     * Optional additional annotations to add to the controller Deployment
     * 
     */
    @Import(name="deploymentAnnotations")
    private @Nullable Output<Map<String,String>> deploymentAnnotations;

    /**
     * @return Optional additional annotations to add to the controller Deployment
     * 
     */
    public Optional<Output<Map<String,String>>> deploymentAnnotations() {
        return Optional.ofNullable(this.deploymentAnnotations);
    }

    /**
     * Optional additional arguments.
     * 
     */
    @Import(name="extraArgs")
    private @Nullable Output<List<String>> extraArgs;

    /**
     * @return Optional additional arguments.
     * 
     */
    public Optional<Output<List<String>>> extraArgs() {
        return Optional.ofNullable(this.extraArgs);
    }

    @Import(name="extraEnv")
    private @Nullable Output<List<EnvVarArgs>> extraEnv;

    public Optional<Output<List<EnvVarArgs>>> extraEnv() {
        return Optional.ofNullable(this.extraEnv);
    }

    @Import(name="extraVolumeMounts")
    private @Nullable Output<List<VolumeMountArgs>> extraVolumeMounts;

    public Optional<Output<List<VolumeMountArgs>>> extraVolumeMounts() {
        return Optional.ofNullable(this.extraVolumeMounts);
    }

    @Import(name="extraVolumes")
    private @Nullable Output<List<VolumeArgs>> extraVolumes;

    public Optional<Output<List<VolumeArgs>>> extraVolumes() {
        return Optional.ofNullable(this.extraVolumes);
    }

    /**
     * Comma separated list of feature gates that should be enabled on the controller pod.
     * 
     */
    @Import(name="featureGates")
    private @Nullable Output<String> featureGates;

    /**
     * @return Comma separated list of feature gates that should be enabled on the controller pod.
     * 
     */
    public Optional<Output<String>> featureGates() {
        return Optional.ofNullable(this.featureGates);
    }

    @Import(name="global")
    private @Nullable Output<CertManagerGlobalArgs> global;

    public Optional<Output<CertManagerGlobalArgs>> global() {
        return Optional.ofNullable(this.global);
    }

    /**
     * HelmOptions is an escape hatch that lets the end user control any aspect of the Helm deployment. This exposes the entirety of the underlying Helm Release component args.
     * 
     */
    @Import(name="helmOptions")
    private @Nullable ReleaseArgs helmOptions;

    /**
     * @return HelmOptions is an escape hatch that lets the end user control any aspect of the Helm deployment. This exposes the entirety of the underlying Helm Release component args.
     * 
     */
    public Optional<ReleaseArgs> helmOptions() {
        return Optional.ofNullable(this.helmOptions);
    }

    @Import(name="http_proxy")
    private @Nullable Output<String> http_proxy;

    public Optional<Output<String>> http_proxy() {
        return Optional.ofNullable(this.http_proxy);
    }

    @Import(name="https_proxy")
    private @Nullable Output<String> https_proxy;

    public Optional<Output<String>> https_proxy() {
        return Optional.ofNullable(this.https_proxy);
    }

    @Import(name="image")
    private @Nullable Output<CertManagerImageArgs> image;

    public Optional<Output<CertManagerImageArgs>> image() {
        return Optional.ofNullable(this.image);
    }

    @Import(name="ingressShim")
    private @Nullable Output<CertManagerIngressShimArgs> ingressShim;

    public Optional<Output<CertManagerIngressShimArgs>> ingressShim() {
        return Optional.ofNullable(this.ingressShim);
    }

    @Import(name="installCRDs")
    private @Nullable Output<Boolean> installCRDs;

    public Optional<Output<Boolean>> installCRDs() {
        return Optional.ofNullable(this.installCRDs);
    }

    @Import(name="no_proxy")
    private @Nullable Output<List<String>> no_proxy;

    public Optional<Output<List<String>>> no_proxy() {
        return Optional.ofNullable(this.no_proxy);
    }

    @Import(name="nodeSelector")
    private @Nullable Output<NodeSelectorArgs> nodeSelector;

    public Optional<Output<NodeSelectorArgs>> nodeSelector() {
        return Optional.ofNullable(this.nodeSelector);
    }

    /**
     * Optional additional annotations to add to the controller Pods
     * 
     */
    @Import(name="podAnnotations")
    private @Nullable Output<Map<String,String>> podAnnotations;

    /**
     * @return Optional additional annotations to add to the controller Pods
     * 
     */
    public Optional<Output<Map<String,String>>> podAnnotations() {
        return Optional.ofNullable(this.podAnnotations);
    }

    @Import(name="podDnsConfig")
    private @Nullable Output<PodDNSConfigArgs> podDnsConfig;

    public Optional<Output<PodDNSConfigArgs>> podDnsConfig() {
        return Optional.ofNullable(this.podDnsConfig);
    }

    /**
     * Optional DNS settings, useful if you have a public and private DNS zone for the same domain on Route 53. What follows is an example of ensuring cert-manager can access an ingress or DNS TXT records at all times. NOTE: This requires Kubernetes 1.10 or `CustomPodDNS` feature gate enabled for the cluster to work.
     * 
     */
    @Import(name="podDnsPolicy")
    private @Nullable Output<String> podDnsPolicy;

    /**
     * @return Optional DNS settings, useful if you have a public and private DNS zone for the same domain on Route 53. What follows is an example of ensuring cert-manager can access an ingress or DNS TXT records at all times. NOTE: This requires Kubernetes 1.10 or `CustomPodDNS` feature gate enabled for the cluster to work.
     * 
     */
    public Optional<Output<String>> podDnsPolicy() {
        return Optional.ofNullable(this.podDnsPolicy);
    }

    @Import(name="podLabels")
    private @Nullable Output<Map<String,String>> podLabels;

    public Optional<Output<Map<String,String>>> podLabels() {
        return Optional.ofNullable(this.podLabels);
    }

    @Import(name="prometheus")
    private @Nullable Output<CertManagerPrometheusArgs> prometheus;

    public Optional<Output<CertManagerPrometheusArgs>> prometheus() {
        return Optional.ofNullable(this.prometheus);
    }

    @Import(name="replicaCount")
    private @Nullable Output<Integer> replicaCount;

    public Optional<Output<Integer>> replicaCount() {
        return Optional.ofNullable(this.replicaCount);
    }

    @Import(name="resources")
    private @Nullable Output<ResourceRequirementsArgs> resources;

    public Optional<Output<ResourceRequirementsArgs>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * Pod Security Context. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     * 
     */
    @Import(name="securityContext")
    private @Nullable Output<PodSecurityContextArgs> securityContext;

    /**
     * @return Pod Security Context. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     * 
     */
    public Optional<Output<PodSecurityContextArgs>> securityContext() {
        return Optional.ofNullable(this.securityContext);
    }

    @Import(name="serviceAccount")
    private @Nullable Output<CertManagerServiceAccountArgs> serviceAccount;

    public Optional<Output<CertManagerServiceAccountArgs>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * Optional additional annotations to add to the controller service
     * 
     */
    @Import(name="serviceAnnotations")
    private @Nullable Output<Map<String,String>> serviceAnnotations;

    /**
     * @return Optional additional annotations to add to the controller service
     * 
     */
    public Optional<Output<Map<String,String>>> serviceAnnotations() {
        return Optional.ofNullable(this.serviceAnnotations);
    }

    /**
     * Optional additional labels to add to the controller Service
     * 
     */
    @Import(name="serviceLabels")
    private @Nullable Output<Map<String,String>> serviceLabels;

    /**
     * @return Optional additional labels to add to the controller Service
     * 
     */
    public Optional<Output<Map<String,String>>> serviceLabels() {
        return Optional.ofNullable(this.serviceLabels);
    }

    @Import(name="startupapicheck")
    private @Nullable Output<CertManagerStartupAPICheckArgs> startupapicheck;

    public Optional<Output<CertManagerStartupAPICheckArgs>> startupapicheck() {
        return Optional.ofNullable(this.startupapicheck);
    }

    @Import(name="strategy")
    private @Nullable Output<DeploymentStrategyArgs> strategy;

    public Optional<Output<DeploymentStrategyArgs>> strategy() {
        return Optional.ofNullable(this.strategy);
    }

    @Import(name="tolerations")
    private @Nullable Output<List<TolerationArgs>> tolerations;

    public Optional<Output<List<TolerationArgs>>> tolerations() {
        return Optional.ofNullable(this.tolerations);
    }

    @Import(name="webhook")
    private @Nullable Output<CertManagerWebhookArgs> webhook;

    public Optional<Output<CertManagerWebhookArgs>> webhook() {
        return Optional.ofNullable(this.webhook);
    }

    private CertManagerArgs() {}

    private CertManagerArgs(CertManagerArgs $) {
        this.affinity = $.affinity;
        this.cainjector = $.cainjector;
        this.clusterResourceNamespace = $.clusterResourceNamespace;
        this.containerSecurityContext = $.containerSecurityContext;
        this.deploymentAnnotations = $.deploymentAnnotations;
        this.extraArgs = $.extraArgs;
        this.extraEnv = $.extraEnv;
        this.extraVolumeMounts = $.extraVolumeMounts;
        this.extraVolumes = $.extraVolumes;
        this.featureGates = $.featureGates;
        this.global = $.global;
        this.helmOptions = $.helmOptions;
        this.http_proxy = $.http_proxy;
        this.https_proxy = $.https_proxy;
        this.image = $.image;
        this.ingressShim = $.ingressShim;
        this.installCRDs = $.installCRDs;
        this.no_proxy = $.no_proxy;
        this.nodeSelector = $.nodeSelector;
        this.podAnnotations = $.podAnnotations;
        this.podDnsConfig = $.podDnsConfig;
        this.podDnsPolicy = $.podDnsPolicy;
        this.podLabels = $.podLabels;
        this.prometheus = $.prometheus;
        this.replicaCount = $.replicaCount;
        this.resources = $.resources;
        this.securityContext = $.securityContext;
        this.serviceAccount = $.serviceAccount;
        this.serviceAnnotations = $.serviceAnnotations;
        this.serviceLabels = $.serviceLabels;
        this.startupapicheck = $.startupapicheck;
        this.strategy = $.strategy;
        this.tolerations = $.tolerations;
        this.webhook = $.webhook;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertManagerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertManagerArgs $;

        public Builder() {
            $ = new CertManagerArgs();
        }

        public Builder(CertManagerArgs defaults) {
            $ = new CertManagerArgs(Objects.requireNonNull(defaults));
        }

        public Builder affinity(@Nullable Output<AffinityArgs> affinity) {
            $.affinity = affinity;
            return this;
        }

        public Builder affinity(AffinityArgs affinity) {
            return affinity(Output.of(affinity));
        }

        public Builder cainjector(@Nullable Output<CertManagerCaInjectorArgs> cainjector) {
            $.cainjector = cainjector;
            return this;
        }

        public Builder cainjector(CertManagerCaInjectorArgs cainjector) {
            return cainjector(Output.of(cainjector));
        }

        /**
         * @param clusterResourceNamespace Override the namespace used to store DNS provider credentials etc. for ClusterIssuer resources. By default, the same namespace as cert-manager is deployed within is used. This namespace will not be automatically created by the Helm chart.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceNamespace(@Nullable Output<String> clusterResourceNamespace) {
            $.clusterResourceNamespace = clusterResourceNamespace;
            return this;
        }

        /**
         * @param clusterResourceNamespace Override the namespace used to store DNS provider credentials etc. for ClusterIssuer resources. By default, the same namespace as cert-manager is deployed within is used. This namespace will not be automatically created by the Helm chart.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceNamespace(String clusterResourceNamespace) {
            return clusterResourceNamespace(Output.of(clusterResourceNamespace));
        }

        /**
         * @param containerSecurityContext Container Security Context to be set on the controller component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         * 
         * @return builder
         * 
         */
        public Builder containerSecurityContext(@Nullable Output<SecurityContextArgs> containerSecurityContext) {
            $.containerSecurityContext = containerSecurityContext;
            return this;
        }

        /**
         * @param containerSecurityContext Container Security Context to be set on the controller component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         * 
         * @return builder
         * 
         */
        public Builder containerSecurityContext(SecurityContextArgs containerSecurityContext) {
            return containerSecurityContext(Output.of(containerSecurityContext));
        }

        /**
         * @param deploymentAnnotations Optional additional annotations to add to the controller Deployment
         * 
         * @return builder
         * 
         */
        public Builder deploymentAnnotations(@Nullable Output<Map<String,String>> deploymentAnnotations) {
            $.deploymentAnnotations = deploymentAnnotations;
            return this;
        }

        /**
         * @param deploymentAnnotations Optional additional annotations to add to the controller Deployment
         * 
         * @return builder
         * 
         */
        public Builder deploymentAnnotations(Map<String,String> deploymentAnnotations) {
            return deploymentAnnotations(Output.of(deploymentAnnotations));
        }

        /**
         * @param extraArgs Optional additional arguments.
         * 
         * @return builder
         * 
         */
        public Builder extraArgs(@Nullable Output<List<String>> extraArgs) {
            $.extraArgs = extraArgs;
            return this;
        }

        /**
         * @param extraArgs Optional additional arguments.
         * 
         * @return builder
         * 
         */
        public Builder extraArgs(List<String> extraArgs) {
            return extraArgs(Output.of(extraArgs));
        }

        /**
         * @param extraArgs Optional additional arguments.
         * 
         * @return builder
         * 
         */
        public Builder extraArgs(String... extraArgs) {
            return extraArgs(List.of(extraArgs));
        }

        public Builder extraEnv(@Nullable Output<List<EnvVarArgs>> extraEnv) {
            $.extraEnv = extraEnv;
            return this;
        }

        public Builder extraEnv(List<EnvVarArgs> extraEnv) {
            return extraEnv(Output.of(extraEnv));
        }

        public Builder extraEnv(EnvVarArgs... extraEnv) {
            return extraEnv(List.of(extraEnv));
        }

        public Builder extraVolumeMounts(@Nullable Output<List<VolumeMountArgs>> extraVolumeMounts) {
            $.extraVolumeMounts = extraVolumeMounts;
            return this;
        }

        public Builder extraVolumeMounts(List<VolumeMountArgs> extraVolumeMounts) {
            return extraVolumeMounts(Output.of(extraVolumeMounts));
        }

        public Builder extraVolumeMounts(VolumeMountArgs... extraVolumeMounts) {
            return extraVolumeMounts(List.of(extraVolumeMounts));
        }

        public Builder extraVolumes(@Nullable Output<List<VolumeArgs>> extraVolumes) {
            $.extraVolumes = extraVolumes;
            return this;
        }

        public Builder extraVolumes(List<VolumeArgs> extraVolumes) {
            return extraVolumes(Output.of(extraVolumes));
        }

        public Builder extraVolumes(VolumeArgs... extraVolumes) {
            return extraVolumes(List.of(extraVolumes));
        }

        /**
         * @param featureGates Comma separated list of feature gates that should be enabled on the controller pod.
         * 
         * @return builder
         * 
         */
        public Builder featureGates(@Nullable Output<String> featureGates) {
            $.featureGates = featureGates;
            return this;
        }

        /**
         * @param featureGates Comma separated list of feature gates that should be enabled on the controller pod.
         * 
         * @return builder
         * 
         */
        public Builder featureGates(String featureGates) {
            return featureGates(Output.of(featureGates));
        }

        public Builder global(@Nullable Output<CertManagerGlobalArgs> global) {
            $.global = global;
            return this;
        }

        public Builder global(CertManagerGlobalArgs global) {
            return global(Output.of(global));
        }

        /**
         * @param helmOptions HelmOptions is an escape hatch that lets the end user control any aspect of the Helm deployment. This exposes the entirety of the underlying Helm Release component args.
         * 
         * @return builder
         * 
         */
        public Builder helmOptions(@Nullable ReleaseArgs helmOptions) {
            $.helmOptions = helmOptions;
            return this;
        }

        public Builder http_proxy(@Nullable Output<String> http_proxy) {
            $.http_proxy = http_proxy;
            return this;
        }

        public Builder http_proxy(String http_proxy) {
            return http_proxy(Output.of(http_proxy));
        }

        public Builder https_proxy(@Nullable Output<String> https_proxy) {
            $.https_proxy = https_proxy;
            return this;
        }

        public Builder https_proxy(String https_proxy) {
            return https_proxy(Output.of(https_proxy));
        }

        public Builder image(@Nullable Output<CertManagerImageArgs> image) {
            $.image = image;
            return this;
        }

        public Builder image(CertManagerImageArgs image) {
            return image(Output.of(image));
        }

        public Builder ingressShim(@Nullable Output<CertManagerIngressShimArgs> ingressShim) {
            $.ingressShim = ingressShim;
            return this;
        }

        public Builder ingressShim(CertManagerIngressShimArgs ingressShim) {
            return ingressShim(Output.of(ingressShim));
        }

        public Builder installCRDs(@Nullable Output<Boolean> installCRDs) {
            $.installCRDs = installCRDs;
            return this;
        }

        public Builder installCRDs(Boolean installCRDs) {
            return installCRDs(Output.of(installCRDs));
        }

        public Builder no_proxy(@Nullable Output<List<String>> no_proxy) {
            $.no_proxy = no_proxy;
            return this;
        }

        public Builder no_proxy(List<String> no_proxy) {
            return no_proxy(Output.of(no_proxy));
        }

        public Builder no_proxy(String... no_proxy) {
            return no_proxy(List.of(no_proxy));
        }

        public Builder nodeSelector(@Nullable Output<NodeSelectorArgs> nodeSelector) {
            $.nodeSelector = nodeSelector;
            return this;
        }

        public Builder nodeSelector(NodeSelectorArgs nodeSelector) {
            return nodeSelector(Output.of(nodeSelector));
        }

        /**
         * @param podAnnotations Optional additional annotations to add to the controller Pods
         * 
         * @return builder
         * 
         */
        public Builder podAnnotations(@Nullable Output<Map<String,String>> podAnnotations) {
            $.podAnnotations = podAnnotations;
            return this;
        }

        /**
         * @param podAnnotations Optional additional annotations to add to the controller Pods
         * 
         * @return builder
         * 
         */
        public Builder podAnnotations(Map<String,String> podAnnotations) {
            return podAnnotations(Output.of(podAnnotations));
        }

        public Builder podDnsConfig(@Nullable Output<PodDNSConfigArgs> podDnsConfig) {
            $.podDnsConfig = podDnsConfig;
            return this;
        }

        public Builder podDnsConfig(PodDNSConfigArgs podDnsConfig) {
            return podDnsConfig(Output.of(podDnsConfig));
        }

        /**
         * @param podDnsPolicy Optional DNS settings, useful if you have a public and private DNS zone for the same domain on Route 53. What follows is an example of ensuring cert-manager can access an ingress or DNS TXT records at all times. NOTE: This requires Kubernetes 1.10 or `CustomPodDNS` feature gate enabled for the cluster to work.
         * 
         * @return builder
         * 
         */
        public Builder podDnsPolicy(@Nullable Output<String> podDnsPolicy) {
            $.podDnsPolicy = podDnsPolicy;
            return this;
        }

        /**
         * @param podDnsPolicy Optional DNS settings, useful if you have a public and private DNS zone for the same domain on Route 53. What follows is an example of ensuring cert-manager can access an ingress or DNS TXT records at all times. NOTE: This requires Kubernetes 1.10 or `CustomPodDNS` feature gate enabled for the cluster to work.
         * 
         * @return builder
         * 
         */
        public Builder podDnsPolicy(String podDnsPolicy) {
            return podDnsPolicy(Output.of(podDnsPolicy));
        }

        public Builder podLabels(@Nullable Output<Map<String,String>> podLabels) {
            $.podLabels = podLabels;
            return this;
        }

        public Builder podLabels(Map<String,String> podLabels) {
            return podLabels(Output.of(podLabels));
        }

        public Builder prometheus(@Nullable Output<CertManagerPrometheusArgs> prometheus) {
            $.prometheus = prometheus;
            return this;
        }

        public Builder prometheus(CertManagerPrometheusArgs prometheus) {
            return prometheus(Output.of(prometheus));
        }

        public Builder replicaCount(@Nullable Output<Integer> replicaCount) {
            $.replicaCount = replicaCount;
            return this;
        }

        public Builder replicaCount(Integer replicaCount) {
            return replicaCount(Output.of(replicaCount));
        }

        public Builder resources(@Nullable Output<ResourceRequirementsArgs> resources) {
            $.resources = resources;
            return this;
        }

        public Builder resources(ResourceRequirementsArgs resources) {
            return resources(Output.of(resources));
        }

        /**
         * @param securityContext Pod Security Context. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         * 
         * @return builder
         * 
         */
        public Builder securityContext(@Nullable Output<PodSecurityContextArgs> securityContext) {
            $.securityContext = securityContext;
            return this;
        }

        /**
         * @param securityContext Pod Security Context. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         * 
         * @return builder
         * 
         */
        public Builder securityContext(PodSecurityContextArgs securityContext) {
            return securityContext(Output.of(securityContext));
        }

        public Builder serviceAccount(@Nullable Output<CertManagerServiceAccountArgs> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccount(CertManagerServiceAccountArgs serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param serviceAnnotations Optional additional annotations to add to the controller service
         * 
         * @return builder
         * 
         */
        public Builder serviceAnnotations(@Nullable Output<Map<String,String>> serviceAnnotations) {
            $.serviceAnnotations = serviceAnnotations;
            return this;
        }

        /**
         * @param serviceAnnotations Optional additional annotations to add to the controller service
         * 
         * @return builder
         * 
         */
        public Builder serviceAnnotations(Map<String,String> serviceAnnotations) {
            return serviceAnnotations(Output.of(serviceAnnotations));
        }

        /**
         * @param serviceLabels Optional additional labels to add to the controller Service
         * 
         * @return builder
         * 
         */
        public Builder serviceLabels(@Nullable Output<Map<String,String>> serviceLabels) {
            $.serviceLabels = serviceLabels;
            return this;
        }

        /**
         * @param serviceLabels Optional additional labels to add to the controller Service
         * 
         * @return builder
         * 
         */
        public Builder serviceLabels(Map<String,String> serviceLabels) {
            return serviceLabels(Output.of(serviceLabels));
        }

        public Builder startupapicheck(@Nullable Output<CertManagerStartupAPICheckArgs> startupapicheck) {
            $.startupapicheck = startupapicheck;
            return this;
        }

        public Builder startupapicheck(CertManagerStartupAPICheckArgs startupapicheck) {
            return startupapicheck(Output.of(startupapicheck));
        }

        public Builder strategy(@Nullable Output<DeploymentStrategyArgs> strategy) {
            $.strategy = strategy;
            return this;
        }

        public Builder strategy(DeploymentStrategyArgs strategy) {
            return strategy(Output.of(strategy));
        }

        public Builder tolerations(@Nullable Output<List<TolerationArgs>> tolerations) {
            $.tolerations = tolerations;
            return this;
        }

        public Builder tolerations(List<TolerationArgs> tolerations) {
            return tolerations(Output.of(tolerations));
        }

        public Builder tolerations(TolerationArgs... tolerations) {
            return tolerations(List.of(tolerations));
        }

        public Builder webhook(@Nullable Output<CertManagerWebhookArgs> webhook) {
            $.webhook = webhook;
            return this;
        }

        public Builder webhook(CertManagerWebhookArgs webhook) {
            return webhook(Output.of(webhook));
        }

        public CertManagerArgs build() {
            return $;
        }
    }

}
