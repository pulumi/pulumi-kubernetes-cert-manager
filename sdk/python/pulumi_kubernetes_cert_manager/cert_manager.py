# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *
import pulumi_kubernetes

__all__ = ['CertManagerArgs', 'CertManager']

@pulumi.input_type
class CertManagerArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['pulumi_kubernetes.core.v1.AffinityArgs']] = None,
                 cainjector: Optional[pulumi.Input['CertManagerCaInjectorArgs']] = None,
                 cluster_resource_namespace: Optional[pulumi.Input[str]] = None,
                 container_security_context: Optional[pulumi.Input['pulumi_kubernetes.core.v1.SecurityContextArgs']] = None,
                 deployment_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_env: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.EnvVarArgs']]]] = None,
                 extra_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeMountArgs']]]] = None,
                 extra_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeArgs']]]] = None,
                 feature_gates: Optional[pulumi.Input[str]] = None,
                 global_: Optional[pulumi.Input['CertManagerGlobalArgs']] = None,
                 helm_options: Optional['ReleaseArgs'] = None,
                 http_proxy: Optional[pulumi.Input[str]] = None,
                 https_proxy: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input['CertManagerImageArgs']] = None,
                 ingress_shim: Optional[pulumi.Input['CertManagerIngressShimArgs']] = None,
                 install_crds: Optional[pulumi.Input[bool]] = None,
                 no_proxy: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_selector: Optional[pulumi.Input['pulumi_kubernetes.core.v1.NodeSelectorArgs']] = None,
                 pod_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 pod_dns_config: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodDNSConfigArgs']] = None,
                 pod_dns_policy: Optional[pulumi.Input[str]] = None,
                 pod_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 prometheus: Optional[pulumi.Input['CertManagerPrometheusArgs']] = None,
                 replica_count: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']] = None,
                 security_context: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSecurityContextArgs']] = None,
                 service_account: Optional[pulumi.Input['CertManagerServiceAccountArgs']] = None,
                 service_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 service_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 startupapicheck: Optional[pulumi.Input['CertManagerStartupAPICheckArgs']] = None,
                 strategy: Optional[pulumi.Input['pulumi_kubernetes.apps.v1.DeploymentStrategyArgs']] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']]]] = None,
                 webhook: Optional[pulumi.Input['CertManagerWebhookArgs']] = None):
        """
        The set of arguments for constructing a CertManager resource.
        :param pulumi.Input[str] cluster_resource_namespace: Override the namespace used to store DNS provider credentials etc. for ClusterIssuer resources. By default, the same namespace as cert-manager is deployed within is used. This namespace will not be automatically created by the Helm chart.
        :param pulumi.Input['pulumi_kubernetes.core.v1.SecurityContextArgs'] container_security_context: Container Security Context to be set on the controller component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] deployment_annotations: Optional additional annotations to add to the controller Deployment
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Optional additional arguments.
        :param pulumi.Input[str] feature_gates: Comma separated list of feature gates that should be enabled on the controller pod.
        :param 'ReleaseArgs' helm_options: HelmOptions is an escape hatch that lets the end user control any aspect of the Helm deployment. This exposes the entirety of the underlying Helm Release component args.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pod_annotations: Optional additional annotations to add to the controller Pods
        :param pulumi.Input[str] pod_dns_policy: Optional DNS settings, useful if you have a public and private DNS zone for the same domain on Route 53. What follows is an example of ensuring cert-manager can access an ingress or DNS TXT records at all times. NOTE: This requires Kubernetes 1.10 or `CustomPodDNS` feature gate enabled for the cluster to work.
        :param pulumi.Input['pulumi_kubernetes.core.v1.PodSecurityContextArgs'] security_context: Pod Security Context. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service_annotations: Optional additional annotations to add to the controller service
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service_labels: Optional additional labels to add to the controller Service
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if cainjector is not None:
            pulumi.set(__self__, "cainjector", cainjector)
        if cluster_resource_namespace is not None:
            pulumi.set(__self__, "cluster_resource_namespace", cluster_resource_namespace)
        if container_security_context is not None:
            pulumi.set(__self__, "container_security_context", container_security_context)
        if deployment_annotations is not None:
            pulumi.set(__self__, "deployment_annotations", deployment_annotations)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if extra_env is not None:
            pulumi.set(__self__, "extra_env", extra_env)
        if extra_volume_mounts is not None:
            pulumi.set(__self__, "extra_volume_mounts", extra_volume_mounts)
        if extra_volumes is not None:
            pulumi.set(__self__, "extra_volumes", extra_volumes)
        if feature_gates is not None:
            pulumi.set(__self__, "feature_gates", feature_gates)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if helm_options is not None:
            pulumi.set(__self__, "helm_options", helm_options)
        if http_proxy is not None:
            pulumi.set(__self__, "http_proxy", http_proxy)
        if https_proxy is not None:
            pulumi.set(__self__, "https_proxy", https_proxy)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if ingress_shim is not None:
            pulumi.set(__self__, "ingress_shim", ingress_shim)
        if install_crds is not None:
            pulumi.set(__self__, "install_crds", install_crds)
        if no_proxy is not None:
            pulumi.set(__self__, "no_proxy", no_proxy)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if pod_annotations is not None:
            pulumi.set(__self__, "pod_annotations", pod_annotations)
        if pod_dns_config is not None:
            pulumi.set(__self__, "pod_dns_config", pod_dns_config)
        if pod_dns_policy is not None:
            pulumi.set(__self__, "pod_dns_policy", pod_dns_policy)
        if pod_labels is not None:
            pulumi.set(__self__, "pod_labels", pod_labels)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)
        if replica_count is not None:
            pulumi.set(__self__, "replica_count", replica_count)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if service_annotations is not None:
            pulumi.set(__self__, "service_annotations", service_annotations)
        if service_labels is not None:
            pulumi.set(__self__, "service_labels", service_labels)
        if startupapicheck is not None:
            pulumi.set(__self__, "startupapicheck", startupapicheck)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.AffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.AffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def cainjector(self) -> Optional[pulumi.Input['CertManagerCaInjectorArgs']]:
        return pulumi.get(self, "cainjector")

    @cainjector.setter
    def cainjector(self, value: Optional[pulumi.Input['CertManagerCaInjectorArgs']]):
        pulumi.set(self, "cainjector", value)

    @property
    @pulumi.getter(name="clusterResourceNamespace")
    def cluster_resource_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Override the namespace used to store DNS provider credentials etc. for ClusterIssuer resources. By default, the same namespace as cert-manager is deployed within is used. This namespace will not be automatically created by the Helm chart.
        """
        return pulumi.get(self, "cluster_resource_namespace")

    @cluster_resource_namespace.setter
    def cluster_resource_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_namespace", value)

    @property
    @pulumi.getter(name="containerSecurityContext")
    def container_security_context(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.SecurityContextArgs']]:
        """
        Container Security Context to be set on the controller component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        """
        return pulumi.get(self, "container_security_context")

    @container_security_context.setter
    def container_security_context(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.SecurityContextArgs']]):
        pulumi.set(self, "container_security_context", value)

    @property
    @pulumi.getter(name="deploymentAnnotations")
    def deployment_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional additional annotations to add to the controller Deployment
        """
        return pulumi.get(self, "deployment_annotations")

    @deployment_annotations.setter
    def deployment_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "deployment_annotations", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional additional arguments.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="extraEnv")
    def extra_env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.EnvVarArgs']]]]:
        return pulumi.get(self, "extra_env")

    @extra_env.setter
    def extra_env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.EnvVarArgs']]]]):
        pulumi.set(self, "extra_env", value)

    @property
    @pulumi.getter(name="extraVolumeMounts")
    def extra_volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeMountArgs']]]]:
        return pulumi.get(self, "extra_volume_mounts")

    @extra_volume_mounts.setter
    def extra_volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeMountArgs']]]]):
        pulumi.set(self, "extra_volume_mounts", value)

    @property
    @pulumi.getter(name="extraVolumes")
    def extra_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeArgs']]]]:
        return pulumi.get(self, "extra_volumes")

    @extra_volumes.setter
    def extra_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeArgs']]]]):
        pulumi.set(self, "extra_volumes", value)

    @property
    @pulumi.getter(name="featureGates")
    def feature_gates(self) -> Optional[pulumi.Input[str]]:
        """
        Comma separated list of feature gates that should be enabled on the controller pod.
        """
        return pulumi.get(self, "feature_gates")

    @feature_gates.setter
    def feature_gates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_gates", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input['CertManagerGlobalArgs']]:
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input['CertManagerGlobalArgs']]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter(name="helmOptions")
    def helm_options(self) -> Optional['ReleaseArgs']:
        """
        HelmOptions is an escape hatch that lets the end user control any aspect of the Helm deployment. This exposes the entirety of the underlying Helm Release component args.
        """
        return pulumi.get(self, "helm_options")

    @helm_options.setter
    def helm_options(self, value: Optional['ReleaseArgs']):
        pulumi.set(self, "helm_options", value)

    @property
    @pulumi.getter
    def http_proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_proxy")

    @http_proxy.setter
    def http_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_proxy", value)

    @property
    @pulumi.getter
    def https_proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_proxy")

    @https_proxy.setter
    def https_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_proxy", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['CertManagerImageArgs']]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['CertManagerImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="ingressShim")
    def ingress_shim(self) -> Optional[pulumi.Input['CertManagerIngressShimArgs']]:
        return pulumi.get(self, "ingress_shim")

    @ingress_shim.setter
    def ingress_shim(self, value: Optional[pulumi.Input['CertManagerIngressShimArgs']]):
        pulumi.set(self, "ingress_shim", value)

    @property
    @pulumi.getter(name="installCRDs")
    def install_crds(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "install_crds")

    @install_crds.setter
    def install_crds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "install_crds", value)

    @property
    @pulumi.getter
    def no_proxy(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "no_proxy")

    @no_proxy.setter
    def no_proxy(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "no_proxy", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.NodeSelectorArgs']]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.NodeSelectorArgs']]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="podAnnotations")
    def pod_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional additional annotations to add to the controller Pods
        """
        return pulumi.get(self, "pod_annotations")

    @pod_annotations.setter
    def pod_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pod_annotations", value)

    @property
    @pulumi.getter(name="podDnsConfig")
    def pod_dns_config(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodDNSConfigArgs']]:
        return pulumi.get(self, "pod_dns_config")

    @pod_dns_config.setter
    def pod_dns_config(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodDNSConfigArgs']]):
        pulumi.set(self, "pod_dns_config", value)

    @property
    @pulumi.getter(name="podDnsPolicy")
    def pod_dns_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Optional DNS settings, useful if you have a public and private DNS zone for the same domain on Route 53. What follows is an example of ensuring cert-manager can access an ingress or DNS TXT records at all times. NOTE: This requires Kubernetes 1.10 or `CustomPodDNS` feature gate enabled for the cluster to work.
        """
        return pulumi.get(self, "pod_dns_policy")

    @pod_dns_policy.setter
    def pod_dns_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_dns_policy", value)

    @property
    @pulumi.getter(name="podLabels")
    def pod_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "pod_labels")

    @pod_labels.setter
    def pod_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pod_labels", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input['CertManagerPrometheusArgs']]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input['CertManagerPrometheusArgs']]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replica_count")

    @replica_count.setter
    def replica_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replica_count", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSecurityContextArgs']]:
        """
        Pod Security Context. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input['CertManagerServiceAccountArgs']]:
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input['CertManagerServiceAccountArgs']]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="serviceAnnotations")
    def service_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional additional annotations to add to the controller service
        """
        return pulumi.get(self, "service_annotations")

    @service_annotations.setter
    def service_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "service_annotations", value)

    @property
    @pulumi.getter(name="serviceLabels")
    def service_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional additional labels to add to the controller Service
        """
        return pulumi.get(self, "service_labels")

    @service_labels.setter
    def service_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "service_labels", value)

    @property
    @pulumi.getter
    def startupapicheck(self) -> Optional[pulumi.Input['CertManagerStartupAPICheckArgs']]:
        return pulumi.get(self, "startupapicheck")

    @startupapicheck.setter
    def startupapicheck(self, value: Optional[pulumi.Input['CertManagerStartupAPICheckArgs']]):
        pulumi.set(self, "startupapicheck", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['pulumi_kubernetes.apps.v1.DeploymentStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['pulumi_kubernetes.apps.v1.DeploymentStrategyArgs']]):
        pulumi.set(self, "strategy", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']]]]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter
    def webhook(self) -> Optional[pulumi.Input['CertManagerWebhookArgs']]:
        return pulumi.get(self, "webhook")

    @webhook.setter
    def webhook(self, value: Optional[pulumi.Input['CertManagerWebhookArgs']]):
        pulumi.set(self, "webhook", value)


class CertManager(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 affinity: Optional[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.AffinityArgs']]] = None,
                 cainjector: Optional[pulumi.Input[Union['CertManagerCaInjectorArgs', 'CertManagerCaInjectorArgsDict']]] = None,
                 cluster_resource_namespace: Optional[pulumi.Input[str]] = None,
                 container_security_context: Optional[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.SecurityContextArgs']]] = None,
                 deployment_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_env: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.EnvVarArgs']]]]] = None,
                 extra_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.VolumeMountArgs']]]]] = None,
                 extra_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.VolumeArgs']]]]] = None,
                 feature_gates: Optional[pulumi.Input[str]] = None,
                 global_: Optional[pulumi.Input[Union['CertManagerGlobalArgs', 'CertManagerGlobalArgsDict']]] = None,
                 helm_options: Optional[Union['ReleaseArgs', 'ReleaseArgsDict']] = None,
                 http_proxy: Optional[pulumi.Input[str]] = None,
                 https_proxy: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[Union['CertManagerImageArgs', 'CertManagerImageArgsDict']]] = None,
                 ingress_shim: Optional[pulumi.Input[Union['CertManagerIngressShimArgs', 'CertManagerIngressShimArgsDict']]] = None,
                 install_crds: Optional[pulumi.Input[bool]] = None,
                 no_proxy: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_selector: Optional[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.NodeSelectorArgs']]] = None,
                 pod_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 pod_dns_config: Optional[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.PodDNSConfigArgs']]] = None,
                 pod_dns_policy: Optional[pulumi.Input[str]] = None,
                 pod_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 prometheus: Optional[pulumi.Input[Union['CertManagerPrometheusArgs', 'CertManagerPrometheusArgsDict']]] = None,
                 replica_count: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']]] = None,
                 security_context: Optional[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.PodSecurityContextArgs']]] = None,
                 service_account: Optional[pulumi.Input[Union['CertManagerServiceAccountArgs', 'CertManagerServiceAccountArgsDict']]] = None,
                 service_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 service_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 startupapicheck: Optional[pulumi.Input[Union['CertManagerStartupAPICheckArgs', 'CertManagerStartupAPICheckArgsDict']]] = None,
                 strategy: Optional[pulumi.Input[pulumi.InputType['pulumi_kubernetes.apps.v1.DeploymentStrategyArgs']]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.TolerationArgs']]]]] = None,
                 webhook: Optional[pulumi.Input[Union['CertManagerWebhookArgs', 'CertManagerWebhookArgsDict']]] = None,
                 __props__=None):
        """
        Automates the management and issuance of TLS certificates from various issuing sources within Kubernetes

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_resource_namespace: Override the namespace used to store DNS provider credentials etc. for ClusterIssuer resources. By default, the same namespace as cert-manager is deployed within is used. This namespace will not be automatically created by the Helm chart.
        :param pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.SecurityContextArgs']] container_security_context: Container Security Context to be set on the controller component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] deployment_annotations: Optional additional annotations to add to the controller Deployment
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Optional additional arguments.
        :param pulumi.Input[str] feature_gates: Comma separated list of feature gates that should be enabled on the controller pod.
        :param Union['ReleaseArgs', 'ReleaseArgsDict'] helm_options: HelmOptions is an escape hatch that lets the end user control any aspect of the Helm deployment. This exposes the entirety of the underlying Helm Release component args.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pod_annotations: Optional additional annotations to add to the controller Pods
        :param pulumi.Input[str] pod_dns_policy: Optional DNS settings, useful if you have a public and private DNS zone for the same domain on Route 53. What follows is an example of ensuring cert-manager can access an ingress or DNS TXT records at all times. NOTE: This requires Kubernetes 1.10 or `CustomPodDNS` feature gate enabled for the cluster to work.
        :param pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.PodSecurityContextArgs']] security_context: Pod Security Context. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service_annotations: Optional additional annotations to add to the controller service
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service_labels: Optional additional labels to add to the controller Service
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CertManagerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Automates the management and issuance of TLS certificates from various issuing sources within Kubernetes

        :param str resource_name: The name of the resource.
        :param CertManagerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CertManagerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 affinity: Optional[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.AffinityArgs']]] = None,
                 cainjector: Optional[pulumi.Input[Union['CertManagerCaInjectorArgs', 'CertManagerCaInjectorArgsDict']]] = None,
                 cluster_resource_namespace: Optional[pulumi.Input[str]] = None,
                 container_security_context: Optional[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.SecurityContextArgs']]] = None,
                 deployment_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_env: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.EnvVarArgs']]]]] = None,
                 extra_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.VolumeMountArgs']]]]] = None,
                 extra_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.VolumeArgs']]]]] = None,
                 feature_gates: Optional[pulumi.Input[str]] = None,
                 global_: Optional[pulumi.Input[Union['CertManagerGlobalArgs', 'CertManagerGlobalArgsDict']]] = None,
                 helm_options: Optional[Union['ReleaseArgs', 'ReleaseArgsDict']] = None,
                 http_proxy: Optional[pulumi.Input[str]] = None,
                 https_proxy: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[Union['CertManagerImageArgs', 'CertManagerImageArgsDict']]] = None,
                 ingress_shim: Optional[pulumi.Input[Union['CertManagerIngressShimArgs', 'CertManagerIngressShimArgsDict']]] = None,
                 install_crds: Optional[pulumi.Input[bool]] = None,
                 no_proxy: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_selector: Optional[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.NodeSelectorArgs']]] = None,
                 pod_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 pod_dns_config: Optional[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.PodDNSConfigArgs']]] = None,
                 pod_dns_policy: Optional[pulumi.Input[str]] = None,
                 pod_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 prometheus: Optional[pulumi.Input[Union['CertManagerPrometheusArgs', 'CertManagerPrometheusArgsDict']]] = None,
                 replica_count: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']]] = None,
                 security_context: Optional[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.PodSecurityContextArgs']]] = None,
                 service_account: Optional[pulumi.Input[Union['CertManagerServiceAccountArgs', 'CertManagerServiceAccountArgsDict']]] = None,
                 service_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 service_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 startupapicheck: Optional[pulumi.Input[Union['CertManagerStartupAPICheckArgs', 'CertManagerStartupAPICheckArgsDict']]] = None,
                 strategy: Optional[pulumi.Input[pulumi.InputType['pulumi_kubernetes.apps.v1.DeploymentStrategyArgs']]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['pulumi_kubernetes.core.v1.TolerationArgs']]]]] = None,
                 webhook: Optional[pulumi.Input[Union['CertManagerWebhookArgs', 'CertManagerWebhookArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CertManagerArgs.__new__(CertManagerArgs)

            __props__.__dict__["affinity"] = affinity
            __props__.__dict__["cainjector"] = cainjector
            __props__.__dict__["cluster_resource_namespace"] = cluster_resource_namespace
            __props__.__dict__["container_security_context"] = container_security_context
            __props__.__dict__["deployment_annotations"] = deployment_annotations
            __props__.__dict__["extra_args"] = extra_args
            __props__.__dict__["extra_env"] = extra_env
            __props__.__dict__["extra_volume_mounts"] = extra_volume_mounts
            __props__.__dict__["extra_volumes"] = extra_volumes
            __props__.__dict__["feature_gates"] = feature_gates
            __props__.__dict__["global_"] = global_
            __props__.__dict__["helm_options"] = helm_options
            __props__.__dict__["http_proxy"] = http_proxy
            __props__.__dict__["https_proxy"] = https_proxy
            __props__.__dict__["image"] = image
            __props__.__dict__["ingress_shim"] = ingress_shim
            __props__.__dict__["install_crds"] = install_crds
            __props__.__dict__["no_proxy"] = no_proxy
            __props__.__dict__["node_selector"] = node_selector
            __props__.__dict__["pod_annotations"] = pod_annotations
            __props__.__dict__["pod_dns_config"] = pod_dns_config
            __props__.__dict__["pod_dns_policy"] = pod_dns_policy
            __props__.__dict__["pod_labels"] = pod_labels
            __props__.__dict__["prometheus"] = prometheus
            __props__.__dict__["replica_count"] = replica_count
            __props__.__dict__["resources"] = resources
            __props__.__dict__["security_context"] = security_context
            __props__.__dict__["service_account"] = service_account
            __props__.__dict__["service_annotations"] = service_annotations
            __props__.__dict__["service_labels"] = service_labels
            __props__.__dict__["startupapicheck"] = startupapicheck
            __props__.__dict__["strategy"] = strategy
            __props__.__dict__["tolerations"] = tolerations
            __props__.__dict__["webhook"] = webhook
            __props__.__dict__["status"] = None
        super(CertManager, __self__).__init__(
            'kubernetes-cert-manager:index:CertManager',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.ReleaseStatus']:
        """
        Detailed information about the status of the underlying Helm deployment.
        """
        return pulumi.get(self, "status")

