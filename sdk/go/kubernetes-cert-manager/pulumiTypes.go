// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetescertmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kubernetes-cert-manager/sdk/go/kubernetes-cert-manager/internal"
	appsv1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/apps/v1"
	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CertManagerCaInjector struct {
	Affinity *corev1.Affinity `pulumi:"affinity"`
	// Container Security Context to be set on the cainjector component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	ContainerSecurityContext *corev1.SecurityContext `pulumi:"containerSecurityContext"`
	// Optional additional annotations to add to the cainjector Deployment
	DeploymentAnnotations map[string]string `pulumi:"deploymentAnnotations"`
	// Optional additional arguments for cainjector
	ExtraArgs    []string          `pulumi:"extraArgs"`
	Image        *CertManagerImage `pulumi:"image"`
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Optional additional annotations to add to the cainjector Pods
	PodAnnotations map[string]string `pulumi:"podAnnotations"`
	// Optional additional labels to add to the Webhook Pods
	PodLabels map[string]string `pulumi:"podLabels"`
	// Pod Security Context to be set on the cainjector component Pod. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	PodSecurityContext *corev1.PodSecurityContext   `pulumi:"podSecurityContext"`
	ReplicaCount       *int                         `pulumi:"replicaCount"`
	Resources          *corev1.ResourceRequirements `pulumi:"resources"`
	ServiceAccount     *CertManagerServiceAccount   `pulumi:"serviceAccount"`
	Strategy           *appsv1.DeploymentStrategy   `pulumi:"strategy"`
	TimeoutSeconds     *int                         `pulumi:"timeoutSeconds"`
	Tolerations        []corev1.Toleration          `pulumi:"tolerations"`
}

// CertManagerCaInjectorInput is an input type that accepts CertManagerCaInjectorArgs and CertManagerCaInjectorOutput values.
// You can construct a concrete instance of `CertManagerCaInjectorInput` via:
//
//	CertManagerCaInjectorArgs{...}
type CertManagerCaInjectorInput interface {
	pulumi.Input

	ToCertManagerCaInjectorOutput() CertManagerCaInjectorOutput
	ToCertManagerCaInjectorOutputWithContext(context.Context) CertManagerCaInjectorOutput
}

type CertManagerCaInjectorArgs struct {
	Affinity corev1.AffinityPtrInput `pulumi:"affinity"`
	// Container Security Context to be set on the cainjector component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	ContainerSecurityContext corev1.SecurityContextPtrInput `pulumi:"containerSecurityContext"`
	// Optional additional annotations to add to the cainjector Deployment
	DeploymentAnnotations pulumi.StringMapInput `pulumi:"deploymentAnnotations"`
	// Optional additional arguments for cainjector
	ExtraArgs    pulumi.StringArrayInput  `pulumi:"extraArgs"`
	Image        CertManagerImagePtrInput `pulumi:"image"`
	NodeSelector pulumi.StringMapInput    `pulumi:"nodeSelector"`
	// Optional additional annotations to add to the cainjector Pods
	PodAnnotations pulumi.StringMapInput `pulumi:"podAnnotations"`
	// Optional additional labels to add to the Webhook Pods
	PodLabels pulumi.StringMapInput `pulumi:"podLabels"`
	// Pod Security Context to be set on the cainjector component Pod. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	PodSecurityContext corev1.PodSecurityContextPtrInput   `pulumi:"podSecurityContext"`
	ReplicaCount       pulumi.IntPtrInput                  `pulumi:"replicaCount"`
	Resources          corev1.ResourceRequirementsPtrInput `pulumi:"resources"`
	ServiceAccount     CertManagerServiceAccountPtrInput   `pulumi:"serviceAccount"`
	Strategy           appsv1.DeploymentStrategyPtrInput   `pulumi:"strategy"`
	TimeoutSeconds     pulumi.IntPtrInput                  `pulumi:"timeoutSeconds"`
	Tolerations        corev1.TolerationArrayInput         `pulumi:"tolerations"`
}

func (CertManagerCaInjectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerCaInjector)(nil)).Elem()
}

func (i CertManagerCaInjectorArgs) ToCertManagerCaInjectorOutput() CertManagerCaInjectorOutput {
	return i.ToCertManagerCaInjectorOutputWithContext(context.Background())
}

func (i CertManagerCaInjectorArgs) ToCertManagerCaInjectorOutputWithContext(ctx context.Context) CertManagerCaInjectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerCaInjectorOutput)
}

func (i CertManagerCaInjectorArgs) ToCertManagerCaInjectorPtrOutput() CertManagerCaInjectorPtrOutput {
	return i.ToCertManagerCaInjectorPtrOutputWithContext(context.Background())
}

func (i CertManagerCaInjectorArgs) ToCertManagerCaInjectorPtrOutputWithContext(ctx context.Context) CertManagerCaInjectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerCaInjectorOutput).ToCertManagerCaInjectorPtrOutputWithContext(ctx)
}

// CertManagerCaInjectorPtrInput is an input type that accepts CertManagerCaInjectorArgs, CertManagerCaInjectorPtr and CertManagerCaInjectorPtrOutput values.
// You can construct a concrete instance of `CertManagerCaInjectorPtrInput` via:
//
//	        CertManagerCaInjectorArgs{...}
//
//	or:
//
//	        nil
type CertManagerCaInjectorPtrInput interface {
	pulumi.Input

	ToCertManagerCaInjectorPtrOutput() CertManagerCaInjectorPtrOutput
	ToCertManagerCaInjectorPtrOutputWithContext(context.Context) CertManagerCaInjectorPtrOutput
}

type certManagerCaInjectorPtrType CertManagerCaInjectorArgs

func CertManagerCaInjectorPtr(v *CertManagerCaInjectorArgs) CertManagerCaInjectorPtrInput {
	return (*certManagerCaInjectorPtrType)(v)
}

func (*certManagerCaInjectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerCaInjector)(nil)).Elem()
}

func (i *certManagerCaInjectorPtrType) ToCertManagerCaInjectorPtrOutput() CertManagerCaInjectorPtrOutput {
	return i.ToCertManagerCaInjectorPtrOutputWithContext(context.Background())
}

func (i *certManagerCaInjectorPtrType) ToCertManagerCaInjectorPtrOutputWithContext(ctx context.Context) CertManagerCaInjectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerCaInjectorPtrOutput)
}

type CertManagerCaInjectorOutput struct{ *pulumi.OutputState }

func (CertManagerCaInjectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerCaInjector)(nil)).Elem()
}

func (o CertManagerCaInjectorOutput) ToCertManagerCaInjectorOutput() CertManagerCaInjectorOutput {
	return o
}

func (o CertManagerCaInjectorOutput) ToCertManagerCaInjectorOutputWithContext(ctx context.Context) CertManagerCaInjectorOutput {
	return o
}

func (o CertManagerCaInjectorOutput) ToCertManagerCaInjectorPtrOutput() CertManagerCaInjectorPtrOutput {
	return o.ToCertManagerCaInjectorPtrOutputWithContext(context.Background())
}

func (o CertManagerCaInjectorOutput) ToCertManagerCaInjectorPtrOutputWithContext(ctx context.Context) CertManagerCaInjectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerCaInjector) *CertManagerCaInjector {
		return &v
	}).(CertManagerCaInjectorPtrOutput)
}

func (o CertManagerCaInjectorOutput) Affinity() corev1.AffinityPtrOutput {
	return o.ApplyT(func(v CertManagerCaInjector) *corev1.Affinity { return v.Affinity }).(corev1.AffinityPtrOutput)
}

// Container Security Context to be set on the cainjector component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o CertManagerCaInjectorOutput) ContainerSecurityContext() corev1.SecurityContextPtrOutput {
	return o.ApplyT(func(v CertManagerCaInjector) *corev1.SecurityContext { return v.ContainerSecurityContext }).(corev1.SecurityContextPtrOutput)
}

// Optional additional annotations to add to the cainjector Deployment
func (o CertManagerCaInjectorOutput) DeploymentAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerCaInjector) map[string]string { return v.DeploymentAnnotations }).(pulumi.StringMapOutput)
}

// Optional additional arguments for cainjector
func (o CertManagerCaInjectorOutput) ExtraArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertManagerCaInjector) []string { return v.ExtraArgs }).(pulumi.StringArrayOutput)
}

func (o CertManagerCaInjectorOutput) Image() CertManagerImagePtrOutput {
	return o.ApplyT(func(v CertManagerCaInjector) *CertManagerImage { return v.Image }).(CertManagerImagePtrOutput)
}

func (o CertManagerCaInjectorOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerCaInjector) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Optional additional annotations to add to the cainjector Pods
func (o CertManagerCaInjectorOutput) PodAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerCaInjector) map[string]string { return v.PodAnnotations }).(pulumi.StringMapOutput)
}

// Optional additional labels to add to the Webhook Pods
func (o CertManagerCaInjectorOutput) PodLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerCaInjector) map[string]string { return v.PodLabels }).(pulumi.StringMapOutput)
}

// Pod Security Context to be set on the cainjector component Pod. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o CertManagerCaInjectorOutput) PodSecurityContext() corev1.PodSecurityContextPtrOutput {
	return o.ApplyT(func(v CertManagerCaInjector) *corev1.PodSecurityContext { return v.PodSecurityContext }).(corev1.PodSecurityContextPtrOutput)
}

func (o CertManagerCaInjectorOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertManagerCaInjector) *int { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

func (o CertManagerCaInjectorOutput) Resources() corev1.ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v CertManagerCaInjector) *corev1.ResourceRequirements { return v.Resources }).(corev1.ResourceRequirementsPtrOutput)
}

func (o CertManagerCaInjectorOutput) ServiceAccount() CertManagerServiceAccountPtrOutput {
	return o.ApplyT(func(v CertManagerCaInjector) *CertManagerServiceAccount { return v.ServiceAccount }).(CertManagerServiceAccountPtrOutput)
}

func (o CertManagerCaInjectorOutput) Strategy() appsv1.DeploymentStrategyPtrOutput {
	return o.ApplyT(func(v CertManagerCaInjector) *appsv1.DeploymentStrategy { return v.Strategy }).(appsv1.DeploymentStrategyPtrOutput)
}

func (o CertManagerCaInjectorOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertManagerCaInjector) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

func (o CertManagerCaInjectorOutput) Tolerations() corev1.TolerationArrayOutput {
	return o.ApplyT(func(v CertManagerCaInjector) []corev1.Toleration { return v.Tolerations }).(corev1.TolerationArrayOutput)
}

type CertManagerCaInjectorPtrOutput struct{ *pulumi.OutputState }

func (CertManagerCaInjectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerCaInjector)(nil)).Elem()
}

func (o CertManagerCaInjectorPtrOutput) ToCertManagerCaInjectorPtrOutput() CertManagerCaInjectorPtrOutput {
	return o
}

func (o CertManagerCaInjectorPtrOutput) ToCertManagerCaInjectorPtrOutputWithContext(ctx context.Context) CertManagerCaInjectorPtrOutput {
	return o
}

func (o CertManagerCaInjectorPtrOutput) Elem() CertManagerCaInjectorOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) CertManagerCaInjector {
		if v != nil {
			return *v
		}
		var ret CertManagerCaInjector
		return ret
	}).(CertManagerCaInjectorOutput)
}

func (o CertManagerCaInjectorPtrOutput) Affinity() corev1.AffinityPtrOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) *corev1.Affinity {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(corev1.AffinityPtrOutput)
}

// Container Security Context to be set on the cainjector component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o CertManagerCaInjectorPtrOutput) ContainerSecurityContext() corev1.SecurityContextPtrOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) *corev1.SecurityContext {
		if v == nil {
			return nil
		}
		return v.ContainerSecurityContext
	}).(corev1.SecurityContextPtrOutput)
}

// Optional additional annotations to add to the cainjector Deployment
func (o CertManagerCaInjectorPtrOutput) DeploymentAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) map[string]string {
		if v == nil {
			return nil
		}
		return v.DeploymentAnnotations
	}).(pulumi.StringMapOutput)
}

// Optional additional arguments for cainjector
func (o CertManagerCaInjectorPtrOutput) ExtraArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) []string {
		if v == nil {
			return nil
		}
		return v.ExtraArgs
	}).(pulumi.StringArrayOutput)
}

func (o CertManagerCaInjectorPtrOutput) Image() CertManagerImagePtrOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) *CertManagerImage {
		if v == nil {
			return nil
		}
		return v.Image
	}).(CertManagerImagePtrOutput)
}

func (o CertManagerCaInjectorPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Optional additional annotations to add to the cainjector Pods
func (o CertManagerCaInjectorPtrOutput) PodAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) map[string]string {
		if v == nil {
			return nil
		}
		return v.PodAnnotations
	}).(pulumi.StringMapOutput)
}

// Optional additional labels to add to the Webhook Pods
func (o CertManagerCaInjectorPtrOutput) PodLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) map[string]string {
		if v == nil {
			return nil
		}
		return v.PodLabels
	}).(pulumi.StringMapOutput)
}

// Pod Security Context to be set on the cainjector component Pod. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o CertManagerCaInjectorPtrOutput) PodSecurityContext() corev1.PodSecurityContextPtrOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) *corev1.PodSecurityContext {
		if v == nil {
			return nil
		}
		return v.PodSecurityContext
	}).(corev1.PodSecurityContextPtrOutput)
}

func (o CertManagerCaInjectorPtrOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaCount
	}).(pulumi.IntPtrOutput)
}

func (o CertManagerCaInjectorPtrOutput) Resources() corev1.ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) *corev1.ResourceRequirements {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(corev1.ResourceRequirementsPtrOutput)
}

func (o CertManagerCaInjectorPtrOutput) ServiceAccount() CertManagerServiceAccountPtrOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) *CertManagerServiceAccount {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(CertManagerServiceAccountPtrOutput)
}

func (o CertManagerCaInjectorPtrOutput) Strategy() appsv1.DeploymentStrategyPtrOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) *appsv1.DeploymentStrategy {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(appsv1.DeploymentStrategyPtrOutput)
}

func (o CertManagerCaInjectorPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

func (o CertManagerCaInjectorPtrOutput) Tolerations() corev1.TolerationArrayOutput {
	return o.ApplyT(func(v *CertManagerCaInjector) []corev1.Toleration {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(corev1.TolerationArrayOutput)
}

type CertManagerGlobal struct {
	// Reference to one or more secrets to be used when pulling images. ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
	ImagePullSecrets []corev1.LocalObjectReference    `pulumi:"imagePullSecrets"`
	LeaderElection   *CertManagerGlobalLeaderElection `pulumi:"leaderElection"`
	// Set the verbosity of cert-manager. Range of 0 - 6 with 6 being the most verbose.
	LogLevel          *int                                `pulumi:"logLevel"`
	PodSecurityPolicy *CertManagerGlobalPodSecurityPolicy `pulumi:"podSecurityPolicy"`
	// Optional priority class to be used for the cert-manager pods.
	PriorityClassName *string                `pulumi:"priorityClassName"`
	Rbac              *CertManagerGlobalRbac `pulumi:"rbac"`
}

// CertManagerGlobalInput is an input type that accepts CertManagerGlobalArgs and CertManagerGlobalOutput values.
// You can construct a concrete instance of `CertManagerGlobalInput` via:
//
//	CertManagerGlobalArgs{...}
type CertManagerGlobalInput interface {
	pulumi.Input

	ToCertManagerGlobalOutput() CertManagerGlobalOutput
	ToCertManagerGlobalOutputWithContext(context.Context) CertManagerGlobalOutput
}

type CertManagerGlobalArgs struct {
	// Reference to one or more secrets to be used when pulling images. ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
	ImagePullSecrets corev1.LocalObjectReferenceArrayInput   `pulumi:"imagePullSecrets"`
	LeaderElection   CertManagerGlobalLeaderElectionPtrInput `pulumi:"leaderElection"`
	// Set the verbosity of cert-manager. Range of 0 - 6 with 6 being the most verbose.
	LogLevel          pulumi.IntPtrInput                         `pulumi:"logLevel"`
	PodSecurityPolicy CertManagerGlobalPodSecurityPolicyPtrInput `pulumi:"podSecurityPolicy"`
	// Optional priority class to be used for the cert-manager pods.
	PriorityClassName pulumi.StringPtrInput         `pulumi:"priorityClassName"`
	Rbac              CertManagerGlobalRbacPtrInput `pulumi:"rbac"`
}

func (CertManagerGlobalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerGlobal)(nil)).Elem()
}

func (i CertManagerGlobalArgs) ToCertManagerGlobalOutput() CertManagerGlobalOutput {
	return i.ToCertManagerGlobalOutputWithContext(context.Background())
}

func (i CertManagerGlobalArgs) ToCertManagerGlobalOutputWithContext(ctx context.Context) CertManagerGlobalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerGlobalOutput)
}

func (i CertManagerGlobalArgs) ToCertManagerGlobalPtrOutput() CertManagerGlobalPtrOutput {
	return i.ToCertManagerGlobalPtrOutputWithContext(context.Background())
}

func (i CertManagerGlobalArgs) ToCertManagerGlobalPtrOutputWithContext(ctx context.Context) CertManagerGlobalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerGlobalOutput).ToCertManagerGlobalPtrOutputWithContext(ctx)
}

// CertManagerGlobalPtrInput is an input type that accepts CertManagerGlobalArgs, CertManagerGlobalPtr and CertManagerGlobalPtrOutput values.
// You can construct a concrete instance of `CertManagerGlobalPtrInput` via:
//
//	        CertManagerGlobalArgs{...}
//
//	or:
//
//	        nil
type CertManagerGlobalPtrInput interface {
	pulumi.Input

	ToCertManagerGlobalPtrOutput() CertManagerGlobalPtrOutput
	ToCertManagerGlobalPtrOutputWithContext(context.Context) CertManagerGlobalPtrOutput
}

type certManagerGlobalPtrType CertManagerGlobalArgs

func CertManagerGlobalPtr(v *CertManagerGlobalArgs) CertManagerGlobalPtrInput {
	return (*certManagerGlobalPtrType)(v)
}

func (*certManagerGlobalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerGlobal)(nil)).Elem()
}

func (i *certManagerGlobalPtrType) ToCertManagerGlobalPtrOutput() CertManagerGlobalPtrOutput {
	return i.ToCertManagerGlobalPtrOutputWithContext(context.Background())
}

func (i *certManagerGlobalPtrType) ToCertManagerGlobalPtrOutputWithContext(ctx context.Context) CertManagerGlobalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerGlobalPtrOutput)
}

type CertManagerGlobalOutput struct{ *pulumi.OutputState }

func (CertManagerGlobalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerGlobal)(nil)).Elem()
}

func (o CertManagerGlobalOutput) ToCertManagerGlobalOutput() CertManagerGlobalOutput {
	return o
}

func (o CertManagerGlobalOutput) ToCertManagerGlobalOutputWithContext(ctx context.Context) CertManagerGlobalOutput {
	return o
}

func (o CertManagerGlobalOutput) ToCertManagerGlobalPtrOutput() CertManagerGlobalPtrOutput {
	return o.ToCertManagerGlobalPtrOutputWithContext(context.Background())
}

func (o CertManagerGlobalOutput) ToCertManagerGlobalPtrOutputWithContext(ctx context.Context) CertManagerGlobalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerGlobal) *CertManagerGlobal {
		return &v
	}).(CertManagerGlobalPtrOutput)
}

// Reference to one or more secrets to be used when pulling images. ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
func (o CertManagerGlobalOutput) ImagePullSecrets() corev1.LocalObjectReferenceArrayOutput {
	return o.ApplyT(func(v CertManagerGlobal) []corev1.LocalObjectReference { return v.ImagePullSecrets }).(corev1.LocalObjectReferenceArrayOutput)
}

func (o CertManagerGlobalOutput) LeaderElection() CertManagerGlobalLeaderElectionPtrOutput {
	return o.ApplyT(func(v CertManagerGlobal) *CertManagerGlobalLeaderElection { return v.LeaderElection }).(CertManagerGlobalLeaderElectionPtrOutput)
}

// Set the verbosity of cert-manager. Range of 0 - 6 with 6 being the most verbose.
func (o CertManagerGlobalOutput) LogLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertManagerGlobal) *int { return v.LogLevel }).(pulumi.IntPtrOutput)
}

func (o CertManagerGlobalOutput) PodSecurityPolicy() CertManagerGlobalPodSecurityPolicyPtrOutput {
	return o.ApplyT(func(v CertManagerGlobal) *CertManagerGlobalPodSecurityPolicy { return v.PodSecurityPolicy }).(CertManagerGlobalPodSecurityPolicyPtrOutput)
}

// Optional priority class to be used for the cert-manager pods.
func (o CertManagerGlobalOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerGlobal) *string { return v.PriorityClassName }).(pulumi.StringPtrOutput)
}

func (o CertManagerGlobalOutput) Rbac() CertManagerGlobalRbacPtrOutput {
	return o.ApplyT(func(v CertManagerGlobal) *CertManagerGlobalRbac { return v.Rbac }).(CertManagerGlobalRbacPtrOutput)
}

type CertManagerGlobalPtrOutput struct{ *pulumi.OutputState }

func (CertManagerGlobalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerGlobal)(nil)).Elem()
}

func (o CertManagerGlobalPtrOutput) ToCertManagerGlobalPtrOutput() CertManagerGlobalPtrOutput {
	return o
}

func (o CertManagerGlobalPtrOutput) ToCertManagerGlobalPtrOutputWithContext(ctx context.Context) CertManagerGlobalPtrOutput {
	return o
}

func (o CertManagerGlobalPtrOutput) Elem() CertManagerGlobalOutput {
	return o.ApplyT(func(v *CertManagerGlobal) CertManagerGlobal {
		if v != nil {
			return *v
		}
		var ret CertManagerGlobal
		return ret
	}).(CertManagerGlobalOutput)
}

// Reference to one or more secrets to be used when pulling images. ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
func (o CertManagerGlobalPtrOutput) ImagePullSecrets() corev1.LocalObjectReferenceArrayOutput {
	return o.ApplyT(func(v *CertManagerGlobal) []corev1.LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.ImagePullSecrets
	}).(corev1.LocalObjectReferenceArrayOutput)
}

func (o CertManagerGlobalPtrOutput) LeaderElection() CertManagerGlobalLeaderElectionPtrOutput {
	return o.ApplyT(func(v *CertManagerGlobal) *CertManagerGlobalLeaderElection {
		if v == nil {
			return nil
		}
		return v.LeaderElection
	}).(CertManagerGlobalLeaderElectionPtrOutput)
}

// Set the verbosity of cert-manager. Range of 0 - 6 with 6 being the most verbose.
func (o CertManagerGlobalPtrOutput) LogLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertManagerGlobal) *int {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(pulumi.IntPtrOutput)
}

func (o CertManagerGlobalPtrOutput) PodSecurityPolicy() CertManagerGlobalPodSecurityPolicyPtrOutput {
	return o.ApplyT(func(v *CertManagerGlobal) *CertManagerGlobalPodSecurityPolicy {
		if v == nil {
			return nil
		}
		return v.PodSecurityPolicy
	}).(CertManagerGlobalPodSecurityPolicyPtrOutput)
}

// Optional priority class to be used for the cert-manager pods.
func (o CertManagerGlobalPtrOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerGlobal) *string {
		if v == nil {
			return nil
		}
		return v.PriorityClassName
	}).(pulumi.StringPtrOutput)
}

func (o CertManagerGlobalPtrOutput) Rbac() CertManagerGlobalRbacPtrOutput {
	return o.ApplyT(func(v *CertManagerGlobal) *CertManagerGlobalRbac {
		if v == nil {
			return nil
		}
		return v.Rbac
	}).(CertManagerGlobalRbacPtrOutput)
}

type CertManagerGlobalLeaderElection struct {
	// The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate.
	LeaseDuration *string `pulumi:"leaseDuration"`
	// Override the namespace used to store the ConfigMap for leader election.
	Namespace *string `pulumi:"namespace"`
	// The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration.
	RenewDeadline *string `pulumi:"renewDeadline"`
}

// CertManagerGlobalLeaderElectionInput is an input type that accepts CertManagerGlobalLeaderElectionArgs and CertManagerGlobalLeaderElectionOutput values.
// You can construct a concrete instance of `CertManagerGlobalLeaderElectionInput` via:
//
//	CertManagerGlobalLeaderElectionArgs{...}
type CertManagerGlobalLeaderElectionInput interface {
	pulumi.Input

	ToCertManagerGlobalLeaderElectionOutput() CertManagerGlobalLeaderElectionOutput
	ToCertManagerGlobalLeaderElectionOutputWithContext(context.Context) CertManagerGlobalLeaderElectionOutput
}

type CertManagerGlobalLeaderElectionArgs struct {
	// The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate.
	LeaseDuration pulumi.StringPtrInput `pulumi:"leaseDuration"`
	// Override the namespace used to store the ConfigMap for leader election.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration.
	RenewDeadline pulumi.StringPtrInput `pulumi:"renewDeadline"`
}

func (CertManagerGlobalLeaderElectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerGlobalLeaderElection)(nil)).Elem()
}

func (i CertManagerGlobalLeaderElectionArgs) ToCertManagerGlobalLeaderElectionOutput() CertManagerGlobalLeaderElectionOutput {
	return i.ToCertManagerGlobalLeaderElectionOutputWithContext(context.Background())
}

func (i CertManagerGlobalLeaderElectionArgs) ToCertManagerGlobalLeaderElectionOutputWithContext(ctx context.Context) CertManagerGlobalLeaderElectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerGlobalLeaderElectionOutput)
}

func (i CertManagerGlobalLeaderElectionArgs) ToCertManagerGlobalLeaderElectionPtrOutput() CertManagerGlobalLeaderElectionPtrOutput {
	return i.ToCertManagerGlobalLeaderElectionPtrOutputWithContext(context.Background())
}

func (i CertManagerGlobalLeaderElectionArgs) ToCertManagerGlobalLeaderElectionPtrOutputWithContext(ctx context.Context) CertManagerGlobalLeaderElectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerGlobalLeaderElectionOutput).ToCertManagerGlobalLeaderElectionPtrOutputWithContext(ctx)
}

// CertManagerGlobalLeaderElectionPtrInput is an input type that accepts CertManagerGlobalLeaderElectionArgs, CertManagerGlobalLeaderElectionPtr and CertManagerGlobalLeaderElectionPtrOutput values.
// You can construct a concrete instance of `CertManagerGlobalLeaderElectionPtrInput` via:
//
//	        CertManagerGlobalLeaderElectionArgs{...}
//
//	or:
//
//	        nil
type CertManagerGlobalLeaderElectionPtrInput interface {
	pulumi.Input

	ToCertManagerGlobalLeaderElectionPtrOutput() CertManagerGlobalLeaderElectionPtrOutput
	ToCertManagerGlobalLeaderElectionPtrOutputWithContext(context.Context) CertManagerGlobalLeaderElectionPtrOutput
}

type certManagerGlobalLeaderElectionPtrType CertManagerGlobalLeaderElectionArgs

func CertManagerGlobalLeaderElectionPtr(v *CertManagerGlobalLeaderElectionArgs) CertManagerGlobalLeaderElectionPtrInput {
	return (*certManagerGlobalLeaderElectionPtrType)(v)
}

func (*certManagerGlobalLeaderElectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerGlobalLeaderElection)(nil)).Elem()
}

func (i *certManagerGlobalLeaderElectionPtrType) ToCertManagerGlobalLeaderElectionPtrOutput() CertManagerGlobalLeaderElectionPtrOutput {
	return i.ToCertManagerGlobalLeaderElectionPtrOutputWithContext(context.Background())
}

func (i *certManagerGlobalLeaderElectionPtrType) ToCertManagerGlobalLeaderElectionPtrOutputWithContext(ctx context.Context) CertManagerGlobalLeaderElectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerGlobalLeaderElectionPtrOutput)
}

type CertManagerGlobalLeaderElectionOutput struct{ *pulumi.OutputState }

func (CertManagerGlobalLeaderElectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerGlobalLeaderElection)(nil)).Elem()
}

func (o CertManagerGlobalLeaderElectionOutput) ToCertManagerGlobalLeaderElectionOutput() CertManagerGlobalLeaderElectionOutput {
	return o
}

func (o CertManagerGlobalLeaderElectionOutput) ToCertManagerGlobalLeaderElectionOutputWithContext(ctx context.Context) CertManagerGlobalLeaderElectionOutput {
	return o
}

func (o CertManagerGlobalLeaderElectionOutput) ToCertManagerGlobalLeaderElectionPtrOutput() CertManagerGlobalLeaderElectionPtrOutput {
	return o.ToCertManagerGlobalLeaderElectionPtrOutputWithContext(context.Background())
}

func (o CertManagerGlobalLeaderElectionOutput) ToCertManagerGlobalLeaderElectionPtrOutputWithContext(ctx context.Context) CertManagerGlobalLeaderElectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerGlobalLeaderElection) *CertManagerGlobalLeaderElection {
		return &v
	}).(CertManagerGlobalLeaderElectionPtrOutput)
}

// The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate.
func (o CertManagerGlobalLeaderElectionOutput) LeaseDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerGlobalLeaderElection) *string { return v.LeaseDuration }).(pulumi.StringPtrOutput)
}

// Override the namespace used to store the ConfigMap for leader election.
func (o CertManagerGlobalLeaderElectionOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerGlobalLeaderElection) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration.
func (o CertManagerGlobalLeaderElectionOutput) RenewDeadline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerGlobalLeaderElection) *string { return v.RenewDeadline }).(pulumi.StringPtrOutput)
}

type CertManagerGlobalLeaderElectionPtrOutput struct{ *pulumi.OutputState }

func (CertManagerGlobalLeaderElectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerGlobalLeaderElection)(nil)).Elem()
}

func (o CertManagerGlobalLeaderElectionPtrOutput) ToCertManagerGlobalLeaderElectionPtrOutput() CertManagerGlobalLeaderElectionPtrOutput {
	return o
}

func (o CertManagerGlobalLeaderElectionPtrOutput) ToCertManagerGlobalLeaderElectionPtrOutputWithContext(ctx context.Context) CertManagerGlobalLeaderElectionPtrOutput {
	return o
}

func (o CertManagerGlobalLeaderElectionPtrOutput) Elem() CertManagerGlobalLeaderElectionOutput {
	return o.ApplyT(func(v *CertManagerGlobalLeaderElection) CertManagerGlobalLeaderElection {
		if v != nil {
			return *v
		}
		var ret CertManagerGlobalLeaderElection
		return ret
	}).(CertManagerGlobalLeaderElectionOutput)
}

// The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate.
func (o CertManagerGlobalLeaderElectionPtrOutput) LeaseDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerGlobalLeaderElection) *string {
		if v == nil {
			return nil
		}
		return v.LeaseDuration
	}).(pulumi.StringPtrOutput)
}

// Override the namespace used to store the ConfigMap for leader election.
func (o CertManagerGlobalLeaderElectionPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerGlobalLeaderElection) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration.
func (o CertManagerGlobalLeaderElectionPtrOutput) RenewDeadline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerGlobalLeaderElection) *string {
		if v == nil {
			return nil
		}
		return v.RenewDeadline
	}).(pulumi.StringPtrOutput)
}

type CertManagerGlobalPodSecurityPolicy struct {
	Enabled     *bool `pulumi:"enabled"`
	UseAppArmor *bool `pulumi:"useAppArmor"`
}

// CertManagerGlobalPodSecurityPolicyInput is an input type that accepts CertManagerGlobalPodSecurityPolicyArgs and CertManagerGlobalPodSecurityPolicyOutput values.
// You can construct a concrete instance of `CertManagerGlobalPodSecurityPolicyInput` via:
//
//	CertManagerGlobalPodSecurityPolicyArgs{...}
type CertManagerGlobalPodSecurityPolicyInput interface {
	pulumi.Input

	ToCertManagerGlobalPodSecurityPolicyOutput() CertManagerGlobalPodSecurityPolicyOutput
	ToCertManagerGlobalPodSecurityPolicyOutputWithContext(context.Context) CertManagerGlobalPodSecurityPolicyOutput
}

type CertManagerGlobalPodSecurityPolicyArgs struct {
	Enabled     pulumi.BoolPtrInput `pulumi:"enabled"`
	UseAppArmor pulumi.BoolPtrInput `pulumi:"useAppArmor"`
}

func (CertManagerGlobalPodSecurityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerGlobalPodSecurityPolicy)(nil)).Elem()
}

func (i CertManagerGlobalPodSecurityPolicyArgs) ToCertManagerGlobalPodSecurityPolicyOutput() CertManagerGlobalPodSecurityPolicyOutput {
	return i.ToCertManagerGlobalPodSecurityPolicyOutputWithContext(context.Background())
}

func (i CertManagerGlobalPodSecurityPolicyArgs) ToCertManagerGlobalPodSecurityPolicyOutputWithContext(ctx context.Context) CertManagerGlobalPodSecurityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerGlobalPodSecurityPolicyOutput)
}

func (i CertManagerGlobalPodSecurityPolicyArgs) ToCertManagerGlobalPodSecurityPolicyPtrOutput() CertManagerGlobalPodSecurityPolicyPtrOutput {
	return i.ToCertManagerGlobalPodSecurityPolicyPtrOutputWithContext(context.Background())
}

func (i CertManagerGlobalPodSecurityPolicyArgs) ToCertManagerGlobalPodSecurityPolicyPtrOutputWithContext(ctx context.Context) CertManagerGlobalPodSecurityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerGlobalPodSecurityPolicyOutput).ToCertManagerGlobalPodSecurityPolicyPtrOutputWithContext(ctx)
}

// CertManagerGlobalPodSecurityPolicyPtrInput is an input type that accepts CertManagerGlobalPodSecurityPolicyArgs, CertManagerGlobalPodSecurityPolicyPtr and CertManagerGlobalPodSecurityPolicyPtrOutput values.
// You can construct a concrete instance of `CertManagerGlobalPodSecurityPolicyPtrInput` via:
//
//	        CertManagerGlobalPodSecurityPolicyArgs{...}
//
//	or:
//
//	        nil
type CertManagerGlobalPodSecurityPolicyPtrInput interface {
	pulumi.Input

	ToCertManagerGlobalPodSecurityPolicyPtrOutput() CertManagerGlobalPodSecurityPolicyPtrOutput
	ToCertManagerGlobalPodSecurityPolicyPtrOutputWithContext(context.Context) CertManagerGlobalPodSecurityPolicyPtrOutput
}

type certManagerGlobalPodSecurityPolicyPtrType CertManagerGlobalPodSecurityPolicyArgs

func CertManagerGlobalPodSecurityPolicyPtr(v *CertManagerGlobalPodSecurityPolicyArgs) CertManagerGlobalPodSecurityPolicyPtrInput {
	return (*certManagerGlobalPodSecurityPolicyPtrType)(v)
}

func (*certManagerGlobalPodSecurityPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerGlobalPodSecurityPolicy)(nil)).Elem()
}

func (i *certManagerGlobalPodSecurityPolicyPtrType) ToCertManagerGlobalPodSecurityPolicyPtrOutput() CertManagerGlobalPodSecurityPolicyPtrOutput {
	return i.ToCertManagerGlobalPodSecurityPolicyPtrOutputWithContext(context.Background())
}

func (i *certManagerGlobalPodSecurityPolicyPtrType) ToCertManagerGlobalPodSecurityPolicyPtrOutputWithContext(ctx context.Context) CertManagerGlobalPodSecurityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerGlobalPodSecurityPolicyPtrOutput)
}

type CertManagerGlobalPodSecurityPolicyOutput struct{ *pulumi.OutputState }

func (CertManagerGlobalPodSecurityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerGlobalPodSecurityPolicy)(nil)).Elem()
}

func (o CertManagerGlobalPodSecurityPolicyOutput) ToCertManagerGlobalPodSecurityPolicyOutput() CertManagerGlobalPodSecurityPolicyOutput {
	return o
}

func (o CertManagerGlobalPodSecurityPolicyOutput) ToCertManagerGlobalPodSecurityPolicyOutputWithContext(ctx context.Context) CertManagerGlobalPodSecurityPolicyOutput {
	return o
}

func (o CertManagerGlobalPodSecurityPolicyOutput) ToCertManagerGlobalPodSecurityPolicyPtrOutput() CertManagerGlobalPodSecurityPolicyPtrOutput {
	return o.ToCertManagerGlobalPodSecurityPolicyPtrOutputWithContext(context.Background())
}

func (o CertManagerGlobalPodSecurityPolicyOutput) ToCertManagerGlobalPodSecurityPolicyPtrOutputWithContext(ctx context.Context) CertManagerGlobalPodSecurityPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerGlobalPodSecurityPolicy) *CertManagerGlobalPodSecurityPolicy {
		return &v
	}).(CertManagerGlobalPodSecurityPolicyPtrOutput)
}

func (o CertManagerGlobalPodSecurityPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CertManagerGlobalPodSecurityPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o CertManagerGlobalPodSecurityPolicyOutput) UseAppArmor() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CertManagerGlobalPodSecurityPolicy) *bool { return v.UseAppArmor }).(pulumi.BoolPtrOutput)
}

type CertManagerGlobalPodSecurityPolicyPtrOutput struct{ *pulumi.OutputState }

func (CertManagerGlobalPodSecurityPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerGlobalPodSecurityPolicy)(nil)).Elem()
}

func (o CertManagerGlobalPodSecurityPolicyPtrOutput) ToCertManagerGlobalPodSecurityPolicyPtrOutput() CertManagerGlobalPodSecurityPolicyPtrOutput {
	return o
}

func (o CertManagerGlobalPodSecurityPolicyPtrOutput) ToCertManagerGlobalPodSecurityPolicyPtrOutputWithContext(ctx context.Context) CertManagerGlobalPodSecurityPolicyPtrOutput {
	return o
}

func (o CertManagerGlobalPodSecurityPolicyPtrOutput) Elem() CertManagerGlobalPodSecurityPolicyOutput {
	return o.ApplyT(func(v *CertManagerGlobalPodSecurityPolicy) CertManagerGlobalPodSecurityPolicy {
		if v != nil {
			return *v
		}
		var ret CertManagerGlobalPodSecurityPolicy
		return ret
	}).(CertManagerGlobalPodSecurityPolicyOutput)
}

func (o CertManagerGlobalPodSecurityPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertManagerGlobalPodSecurityPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o CertManagerGlobalPodSecurityPolicyPtrOutput) UseAppArmor() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertManagerGlobalPodSecurityPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.UseAppArmor
	}).(pulumi.BoolPtrOutput)
}

type CertManagerGlobalRbac struct {
	Create *bool `pulumi:"create"`
}

// CertManagerGlobalRbacInput is an input type that accepts CertManagerGlobalRbacArgs and CertManagerGlobalRbacOutput values.
// You can construct a concrete instance of `CertManagerGlobalRbacInput` via:
//
//	CertManagerGlobalRbacArgs{...}
type CertManagerGlobalRbacInput interface {
	pulumi.Input

	ToCertManagerGlobalRbacOutput() CertManagerGlobalRbacOutput
	ToCertManagerGlobalRbacOutputWithContext(context.Context) CertManagerGlobalRbacOutput
}

type CertManagerGlobalRbacArgs struct {
	Create pulumi.BoolPtrInput `pulumi:"create"`
}

func (CertManagerGlobalRbacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerGlobalRbac)(nil)).Elem()
}

func (i CertManagerGlobalRbacArgs) ToCertManagerGlobalRbacOutput() CertManagerGlobalRbacOutput {
	return i.ToCertManagerGlobalRbacOutputWithContext(context.Background())
}

func (i CertManagerGlobalRbacArgs) ToCertManagerGlobalRbacOutputWithContext(ctx context.Context) CertManagerGlobalRbacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerGlobalRbacOutput)
}

func (i CertManagerGlobalRbacArgs) ToCertManagerGlobalRbacPtrOutput() CertManagerGlobalRbacPtrOutput {
	return i.ToCertManagerGlobalRbacPtrOutputWithContext(context.Background())
}

func (i CertManagerGlobalRbacArgs) ToCertManagerGlobalRbacPtrOutputWithContext(ctx context.Context) CertManagerGlobalRbacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerGlobalRbacOutput).ToCertManagerGlobalRbacPtrOutputWithContext(ctx)
}

// CertManagerGlobalRbacPtrInput is an input type that accepts CertManagerGlobalRbacArgs, CertManagerGlobalRbacPtr and CertManagerGlobalRbacPtrOutput values.
// You can construct a concrete instance of `CertManagerGlobalRbacPtrInput` via:
//
//	        CertManagerGlobalRbacArgs{...}
//
//	or:
//
//	        nil
type CertManagerGlobalRbacPtrInput interface {
	pulumi.Input

	ToCertManagerGlobalRbacPtrOutput() CertManagerGlobalRbacPtrOutput
	ToCertManagerGlobalRbacPtrOutputWithContext(context.Context) CertManagerGlobalRbacPtrOutput
}

type certManagerGlobalRbacPtrType CertManagerGlobalRbacArgs

func CertManagerGlobalRbacPtr(v *CertManagerGlobalRbacArgs) CertManagerGlobalRbacPtrInput {
	return (*certManagerGlobalRbacPtrType)(v)
}

func (*certManagerGlobalRbacPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerGlobalRbac)(nil)).Elem()
}

func (i *certManagerGlobalRbacPtrType) ToCertManagerGlobalRbacPtrOutput() CertManagerGlobalRbacPtrOutput {
	return i.ToCertManagerGlobalRbacPtrOutputWithContext(context.Background())
}

func (i *certManagerGlobalRbacPtrType) ToCertManagerGlobalRbacPtrOutputWithContext(ctx context.Context) CertManagerGlobalRbacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerGlobalRbacPtrOutput)
}

type CertManagerGlobalRbacOutput struct{ *pulumi.OutputState }

func (CertManagerGlobalRbacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerGlobalRbac)(nil)).Elem()
}

func (o CertManagerGlobalRbacOutput) ToCertManagerGlobalRbacOutput() CertManagerGlobalRbacOutput {
	return o
}

func (o CertManagerGlobalRbacOutput) ToCertManagerGlobalRbacOutputWithContext(ctx context.Context) CertManagerGlobalRbacOutput {
	return o
}

func (o CertManagerGlobalRbacOutput) ToCertManagerGlobalRbacPtrOutput() CertManagerGlobalRbacPtrOutput {
	return o.ToCertManagerGlobalRbacPtrOutputWithContext(context.Background())
}

func (o CertManagerGlobalRbacOutput) ToCertManagerGlobalRbacPtrOutputWithContext(ctx context.Context) CertManagerGlobalRbacPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerGlobalRbac) *CertManagerGlobalRbac {
		return &v
	}).(CertManagerGlobalRbacPtrOutput)
}

func (o CertManagerGlobalRbacOutput) Create() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CertManagerGlobalRbac) *bool { return v.Create }).(pulumi.BoolPtrOutput)
}

type CertManagerGlobalRbacPtrOutput struct{ *pulumi.OutputState }

func (CertManagerGlobalRbacPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerGlobalRbac)(nil)).Elem()
}

func (o CertManagerGlobalRbacPtrOutput) ToCertManagerGlobalRbacPtrOutput() CertManagerGlobalRbacPtrOutput {
	return o
}

func (o CertManagerGlobalRbacPtrOutput) ToCertManagerGlobalRbacPtrOutputWithContext(ctx context.Context) CertManagerGlobalRbacPtrOutput {
	return o
}

func (o CertManagerGlobalRbacPtrOutput) Elem() CertManagerGlobalRbacOutput {
	return o.ApplyT(func(v *CertManagerGlobalRbac) CertManagerGlobalRbac {
		if v != nil {
			return *v
		}
		var ret CertManagerGlobalRbac
		return ret
	}).(CertManagerGlobalRbacOutput)
}

func (o CertManagerGlobalRbacPtrOutput) Create() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertManagerGlobalRbac) *bool {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.BoolPtrOutput)
}

type CertManagerImage struct {
	// Setting a digest will override any tag, e.g. `digest: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20`.
	Digest     *string `pulumi:"digest"`
	PullPolicy *string `pulumi:"pullPolicy"`
	// You can manage a registry with `registry: quay.io`.
	Registry *string `pulumi:"registry"`
	// You can manage a registry with `repository: jetstack/cert-manager-controller`.
	Repository *string `pulumi:"repository"`
	// Override the image tag to deploy by setting this variable. If no value is set, the chart's appVersion will be used.
	Tag *string `pulumi:"tag"`
}

// CertManagerImageInput is an input type that accepts CertManagerImageArgs and CertManagerImageOutput values.
// You can construct a concrete instance of `CertManagerImageInput` via:
//
//	CertManagerImageArgs{...}
type CertManagerImageInput interface {
	pulumi.Input

	ToCertManagerImageOutput() CertManagerImageOutput
	ToCertManagerImageOutputWithContext(context.Context) CertManagerImageOutput
}

type CertManagerImageArgs struct {
	// Setting a digest will override any tag, e.g. `digest: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20`.
	Digest     pulumi.StringPtrInput `pulumi:"digest"`
	PullPolicy pulumi.StringPtrInput `pulumi:"pullPolicy"`
	// You can manage a registry with `registry: quay.io`.
	Registry pulumi.StringPtrInput `pulumi:"registry"`
	// You can manage a registry with `repository: jetstack/cert-manager-controller`.
	Repository pulumi.StringPtrInput `pulumi:"repository"`
	// Override the image tag to deploy by setting this variable. If no value is set, the chart's appVersion will be used.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (CertManagerImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerImage)(nil)).Elem()
}

func (i CertManagerImageArgs) ToCertManagerImageOutput() CertManagerImageOutput {
	return i.ToCertManagerImageOutputWithContext(context.Background())
}

func (i CertManagerImageArgs) ToCertManagerImageOutputWithContext(ctx context.Context) CertManagerImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerImageOutput)
}

func (i CertManagerImageArgs) ToCertManagerImagePtrOutput() CertManagerImagePtrOutput {
	return i.ToCertManagerImagePtrOutputWithContext(context.Background())
}

func (i CertManagerImageArgs) ToCertManagerImagePtrOutputWithContext(ctx context.Context) CertManagerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerImageOutput).ToCertManagerImagePtrOutputWithContext(ctx)
}

// CertManagerImagePtrInput is an input type that accepts CertManagerImageArgs, CertManagerImagePtr and CertManagerImagePtrOutput values.
// You can construct a concrete instance of `CertManagerImagePtrInput` via:
//
//	        CertManagerImageArgs{...}
//
//	or:
//
//	        nil
type CertManagerImagePtrInput interface {
	pulumi.Input

	ToCertManagerImagePtrOutput() CertManagerImagePtrOutput
	ToCertManagerImagePtrOutputWithContext(context.Context) CertManagerImagePtrOutput
}

type certManagerImagePtrType CertManagerImageArgs

func CertManagerImagePtr(v *CertManagerImageArgs) CertManagerImagePtrInput {
	return (*certManagerImagePtrType)(v)
}

func (*certManagerImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerImage)(nil)).Elem()
}

func (i *certManagerImagePtrType) ToCertManagerImagePtrOutput() CertManagerImagePtrOutput {
	return i.ToCertManagerImagePtrOutputWithContext(context.Background())
}

func (i *certManagerImagePtrType) ToCertManagerImagePtrOutputWithContext(ctx context.Context) CertManagerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerImagePtrOutput)
}

type CertManagerImageOutput struct{ *pulumi.OutputState }

func (CertManagerImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerImage)(nil)).Elem()
}

func (o CertManagerImageOutput) ToCertManagerImageOutput() CertManagerImageOutput {
	return o
}

func (o CertManagerImageOutput) ToCertManagerImageOutputWithContext(ctx context.Context) CertManagerImageOutput {
	return o
}

func (o CertManagerImageOutput) ToCertManagerImagePtrOutput() CertManagerImagePtrOutput {
	return o.ToCertManagerImagePtrOutputWithContext(context.Background())
}

func (o CertManagerImageOutput) ToCertManagerImagePtrOutputWithContext(ctx context.Context) CertManagerImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerImage) *CertManagerImage {
		return &v
	}).(CertManagerImagePtrOutput)
}

// Setting a digest will override any tag, e.g. `digest: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20`.
func (o CertManagerImageOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerImage) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

func (o CertManagerImageOutput) PullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerImage) *string { return v.PullPolicy }).(pulumi.StringPtrOutput)
}

// You can manage a registry with `registry: quay.io`.
func (o CertManagerImageOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerImage) *string { return v.Registry }).(pulumi.StringPtrOutput)
}

// You can manage a registry with `repository: jetstack/cert-manager-controller`.
func (o CertManagerImageOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerImage) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// Override the image tag to deploy by setting this variable. If no value is set, the chart's appVersion will be used.
func (o CertManagerImageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerImage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type CertManagerImagePtrOutput struct{ *pulumi.OutputState }

func (CertManagerImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerImage)(nil)).Elem()
}

func (o CertManagerImagePtrOutput) ToCertManagerImagePtrOutput() CertManagerImagePtrOutput {
	return o
}

func (o CertManagerImagePtrOutput) ToCertManagerImagePtrOutputWithContext(ctx context.Context) CertManagerImagePtrOutput {
	return o
}

func (o CertManagerImagePtrOutput) Elem() CertManagerImageOutput {
	return o.ApplyT(func(v *CertManagerImage) CertManagerImage {
		if v != nil {
			return *v
		}
		var ret CertManagerImage
		return ret
	}).(CertManagerImageOutput)
}

// Setting a digest will override any tag, e.g. `digest: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20`.
func (o CertManagerImagePtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerImage) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

func (o CertManagerImagePtrOutput) PullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerImage) *string {
		if v == nil {
			return nil
		}
		return v.PullPolicy
	}).(pulumi.StringPtrOutput)
}

// You can manage a registry with `registry: quay.io`.
func (o CertManagerImagePtrOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerImage) *string {
		if v == nil {
			return nil
		}
		return v.Registry
	}).(pulumi.StringPtrOutput)
}

// You can manage a registry with `repository: jetstack/cert-manager-controller`.
func (o CertManagerImagePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerImage) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

// Override the image tag to deploy by setting this variable. If no value is set, the chart's appVersion will be used.
func (o CertManagerImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerImage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

type CertManagerIngressShim struct {
	DefaultIssuerGroup *string `pulumi:"defaultIssuerGroup"`
	DefaultIssuerKind  *string `pulumi:"defaultIssuerKind"`
	DefaultIssuerName  *string `pulumi:"defaultIssuerName"`
}

// CertManagerIngressShimInput is an input type that accepts CertManagerIngressShimArgs and CertManagerIngressShimOutput values.
// You can construct a concrete instance of `CertManagerIngressShimInput` via:
//
//	CertManagerIngressShimArgs{...}
type CertManagerIngressShimInput interface {
	pulumi.Input

	ToCertManagerIngressShimOutput() CertManagerIngressShimOutput
	ToCertManagerIngressShimOutputWithContext(context.Context) CertManagerIngressShimOutput
}

type CertManagerIngressShimArgs struct {
	DefaultIssuerGroup pulumi.StringPtrInput `pulumi:"defaultIssuerGroup"`
	DefaultIssuerKind  pulumi.StringPtrInput `pulumi:"defaultIssuerKind"`
	DefaultIssuerName  pulumi.StringPtrInput `pulumi:"defaultIssuerName"`
}

func (CertManagerIngressShimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerIngressShim)(nil)).Elem()
}

func (i CertManagerIngressShimArgs) ToCertManagerIngressShimOutput() CertManagerIngressShimOutput {
	return i.ToCertManagerIngressShimOutputWithContext(context.Background())
}

func (i CertManagerIngressShimArgs) ToCertManagerIngressShimOutputWithContext(ctx context.Context) CertManagerIngressShimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerIngressShimOutput)
}

func (i CertManagerIngressShimArgs) ToCertManagerIngressShimPtrOutput() CertManagerIngressShimPtrOutput {
	return i.ToCertManagerIngressShimPtrOutputWithContext(context.Background())
}

func (i CertManagerIngressShimArgs) ToCertManagerIngressShimPtrOutputWithContext(ctx context.Context) CertManagerIngressShimPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerIngressShimOutput).ToCertManagerIngressShimPtrOutputWithContext(ctx)
}

// CertManagerIngressShimPtrInput is an input type that accepts CertManagerIngressShimArgs, CertManagerIngressShimPtr and CertManagerIngressShimPtrOutput values.
// You can construct a concrete instance of `CertManagerIngressShimPtrInput` via:
//
//	        CertManagerIngressShimArgs{...}
//
//	or:
//
//	        nil
type CertManagerIngressShimPtrInput interface {
	pulumi.Input

	ToCertManagerIngressShimPtrOutput() CertManagerIngressShimPtrOutput
	ToCertManagerIngressShimPtrOutputWithContext(context.Context) CertManagerIngressShimPtrOutput
}

type certManagerIngressShimPtrType CertManagerIngressShimArgs

func CertManagerIngressShimPtr(v *CertManagerIngressShimArgs) CertManagerIngressShimPtrInput {
	return (*certManagerIngressShimPtrType)(v)
}

func (*certManagerIngressShimPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerIngressShim)(nil)).Elem()
}

func (i *certManagerIngressShimPtrType) ToCertManagerIngressShimPtrOutput() CertManagerIngressShimPtrOutput {
	return i.ToCertManagerIngressShimPtrOutputWithContext(context.Background())
}

func (i *certManagerIngressShimPtrType) ToCertManagerIngressShimPtrOutputWithContext(ctx context.Context) CertManagerIngressShimPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerIngressShimPtrOutput)
}

type CertManagerIngressShimOutput struct{ *pulumi.OutputState }

func (CertManagerIngressShimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerIngressShim)(nil)).Elem()
}

func (o CertManagerIngressShimOutput) ToCertManagerIngressShimOutput() CertManagerIngressShimOutput {
	return o
}

func (o CertManagerIngressShimOutput) ToCertManagerIngressShimOutputWithContext(ctx context.Context) CertManagerIngressShimOutput {
	return o
}

func (o CertManagerIngressShimOutput) ToCertManagerIngressShimPtrOutput() CertManagerIngressShimPtrOutput {
	return o.ToCertManagerIngressShimPtrOutputWithContext(context.Background())
}

func (o CertManagerIngressShimOutput) ToCertManagerIngressShimPtrOutputWithContext(ctx context.Context) CertManagerIngressShimPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerIngressShim) *CertManagerIngressShim {
		return &v
	}).(CertManagerIngressShimPtrOutput)
}

func (o CertManagerIngressShimOutput) DefaultIssuerGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerIngressShim) *string { return v.DefaultIssuerGroup }).(pulumi.StringPtrOutput)
}

func (o CertManagerIngressShimOutput) DefaultIssuerKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerIngressShim) *string { return v.DefaultIssuerKind }).(pulumi.StringPtrOutput)
}

func (o CertManagerIngressShimOutput) DefaultIssuerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerIngressShim) *string { return v.DefaultIssuerName }).(pulumi.StringPtrOutput)
}

type CertManagerIngressShimPtrOutput struct{ *pulumi.OutputState }

func (CertManagerIngressShimPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerIngressShim)(nil)).Elem()
}

func (o CertManagerIngressShimPtrOutput) ToCertManagerIngressShimPtrOutput() CertManagerIngressShimPtrOutput {
	return o
}

func (o CertManagerIngressShimPtrOutput) ToCertManagerIngressShimPtrOutputWithContext(ctx context.Context) CertManagerIngressShimPtrOutput {
	return o
}

func (o CertManagerIngressShimPtrOutput) Elem() CertManagerIngressShimOutput {
	return o.ApplyT(func(v *CertManagerIngressShim) CertManagerIngressShim {
		if v != nil {
			return *v
		}
		var ret CertManagerIngressShim
		return ret
	}).(CertManagerIngressShimOutput)
}

func (o CertManagerIngressShimPtrOutput) DefaultIssuerGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerIngressShim) *string {
		if v == nil {
			return nil
		}
		return v.DefaultIssuerGroup
	}).(pulumi.StringPtrOutput)
}

func (o CertManagerIngressShimPtrOutput) DefaultIssuerKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerIngressShim) *string {
		if v == nil {
			return nil
		}
		return v.DefaultIssuerKind
	}).(pulumi.StringPtrOutput)
}

func (o CertManagerIngressShimPtrOutput) DefaultIssuerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerIngressShim) *string {
		if v == nil {
			return nil
		}
		return v.DefaultIssuerName
	}).(pulumi.StringPtrOutput)
}

type CertManagerPrometheus struct {
	Enabled        *bool                                `pulumi:"enabled"`
	ServiceMonitor *CertManagerPrometheusServiceMonitor `pulumi:"serviceMonitor"`
}

// CertManagerPrometheusInput is an input type that accepts CertManagerPrometheusArgs and CertManagerPrometheusOutput values.
// You can construct a concrete instance of `CertManagerPrometheusInput` via:
//
//	CertManagerPrometheusArgs{...}
type CertManagerPrometheusInput interface {
	pulumi.Input

	ToCertManagerPrometheusOutput() CertManagerPrometheusOutput
	ToCertManagerPrometheusOutputWithContext(context.Context) CertManagerPrometheusOutput
}

type CertManagerPrometheusArgs struct {
	Enabled        pulumi.BoolPtrInput                         `pulumi:"enabled"`
	ServiceMonitor CertManagerPrometheusServiceMonitorPtrInput `pulumi:"serviceMonitor"`
}

func (CertManagerPrometheusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerPrometheus)(nil)).Elem()
}

func (i CertManagerPrometheusArgs) ToCertManagerPrometheusOutput() CertManagerPrometheusOutput {
	return i.ToCertManagerPrometheusOutputWithContext(context.Background())
}

func (i CertManagerPrometheusArgs) ToCertManagerPrometheusOutputWithContext(ctx context.Context) CertManagerPrometheusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerPrometheusOutput)
}

func (i CertManagerPrometheusArgs) ToCertManagerPrometheusPtrOutput() CertManagerPrometheusPtrOutput {
	return i.ToCertManagerPrometheusPtrOutputWithContext(context.Background())
}

func (i CertManagerPrometheusArgs) ToCertManagerPrometheusPtrOutputWithContext(ctx context.Context) CertManagerPrometheusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerPrometheusOutput).ToCertManagerPrometheusPtrOutputWithContext(ctx)
}

// CertManagerPrometheusPtrInput is an input type that accepts CertManagerPrometheusArgs, CertManagerPrometheusPtr and CertManagerPrometheusPtrOutput values.
// You can construct a concrete instance of `CertManagerPrometheusPtrInput` via:
//
//	        CertManagerPrometheusArgs{...}
//
//	or:
//
//	        nil
type CertManagerPrometheusPtrInput interface {
	pulumi.Input

	ToCertManagerPrometheusPtrOutput() CertManagerPrometheusPtrOutput
	ToCertManagerPrometheusPtrOutputWithContext(context.Context) CertManagerPrometheusPtrOutput
}

type certManagerPrometheusPtrType CertManagerPrometheusArgs

func CertManagerPrometheusPtr(v *CertManagerPrometheusArgs) CertManagerPrometheusPtrInput {
	return (*certManagerPrometheusPtrType)(v)
}

func (*certManagerPrometheusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerPrometheus)(nil)).Elem()
}

func (i *certManagerPrometheusPtrType) ToCertManagerPrometheusPtrOutput() CertManagerPrometheusPtrOutput {
	return i.ToCertManagerPrometheusPtrOutputWithContext(context.Background())
}

func (i *certManagerPrometheusPtrType) ToCertManagerPrometheusPtrOutputWithContext(ctx context.Context) CertManagerPrometheusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerPrometheusPtrOutput)
}

type CertManagerPrometheusOutput struct{ *pulumi.OutputState }

func (CertManagerPrometheusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerPrometheus)(nil)).Elem()
}

func (o CertManagerPrometheusOutput) ToCertManagerPrometheusOutput() CertManagerPrometheusOutput {
	return o
}

func (o CertManagerPrometheusOutput) ToCertManagerPrometheusOutputWithContext(ctx context.Context) CertManagerPrometheusOutput {
	return o
}

func (o CertManagerPrometheusOutput) ToCertManagerPrometheusPtrOutput() CertManagerPrometheusPtrOutput {
	return o.ToCertManagerPrometheusPtrOutputWithContext(context.Background())
}

func (o CertManagerPrometheusOutput) ToCertManagerPrometheusPtrOutputWithContext(ctx context.Context) CertManagerPrometheusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerPrometheus) *CertManagerPrometheus {
		return &v
	}).(CertManagerPrometheusPtrOutput)
}

func (o CertManagerPrometheusOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CertManagerPrometheus) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o CertManagerPrometheusOutput) ServiceMonitor() CertManagerPrometheusServiceMonitorPtrOutput {
	return o.ApplyT(func(v CertManagerPrometheus) *CertManagerPrometheusServiceMonitor { return v.ServiceMonitor }).(CertManagerPrometheusServiceMonitorPtrOutput)
}

type CertManagerPrometheusPtrOutput struct{ *pulumi.OutputState }

func (CertManagerPrometheusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerPrometheus)(nil)).Elem()
}

func (o CertManagerPrometheusPtrOutput) ToCertManagerPrometheusPtrOutput() CertManagerPrometheusPtrOutput {
	return o
}

func (o CertManagerPrometheusPtrOutput) ToCertManagerPrometheusPtrOutputWithContext(ctx context.Context) CertManagerPrometheusPtrOutput {
	return o
}

func (o CertManagerPrometheusPtrOutput) Elem() CertManagerPrometheusOutput {
	return o.ApplyT(func(v *CertManagerPrometheus) CertManagerPrometheus {
		if v != nil {
			return *v
		}
		var ret CertManagerPrometheus
		return ret
	}).(CertManagerPrometheusOutput)
}

func (o CertManagerPrometheusPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertManagerPrometheus) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o CertManagerPrometheusPtrOutput) ServiceMonitor() CertManagerPrometheusServiceMonitorPtrOutput {
	return o.ApplyT(func(v *CertManagerPrometheus) *CertManagerPrometheusServiceMonitor {
		if v == nil {
			return nil
		}
		return v.ServiceMonitor
	}).(CertManagerPrometheusServiceMonitorPtrOutput)
}

type CertManagerPrometheusServiceMonitor struct {
	Enabled            *bool             `pulumi:"enabled"`
	Interval           *string           `pulumi:"interval"`
	Labels             map[string]string `pulumi:"labels"`
	Path               *string           `pulumi:"path"`
	PrometheusInstance *string           `pulumi:"prometheusInstance"`
	String             *string           `pulumi:"string"`
	TargetPort         *int              `pulumi:"targetPort"`
}

// CertManagerPrometheusServiceMonitorInput is an input type that accepts CertManagerPrometheusServiceMonitorArgs and CertManagerPrometheusServiceMonitorOutput values.
// You can construct a concrete instance of `CertManagerPrometheusServiceMonitorInput` via:
//
//	CertManagerPrometheusServiceMonitorArgs{...}
type CertManagerPrometheusServiceMonitorInput interface {
	pulumi.Input

	ToCertManagerPrometheusServiceMonitorOutput() CertManagerPrometheusServiceMonitorOutput
	ToCertManagerPrometheusServiceMonitorOutputWithContext(context.Context) CertManagerPrometheusServiceMonitorOutput
}

type CertManagerPrometheusServiceMonitorArgs struct {
	Enabled            pulumi.BoolPtrInput   `pulumi:"enabled"`
	Interval           pulumi.StringPtrInput `pulumi:"interval"`
	Labels             pulumi.StringMapInput `pulumi:"labels"`
	Path               pulumi.StringPtrInput `pulumi:"path"`
	PrometheusInstance pulumi.StringPtrInput `pulumi:"prometheusInstance"`
	String             pulumi.StringPtrInput `pulumi:"string"`
	TargetPort         pulumi.IntPtrInput    `pulumi:"targetPort"`
}

func (CertManagerPrometheusServiceMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerPrometheusServiceMonitor)(nil)).Elem()
}

func (i CertManagerPrometheusServiceMonitorArgs) ToCertManagerPrometheusServiceMonitorOutput() CertManagerPrometheusServiceMonitorOutput {
	return i.ToCertManagerPrometheusServiceMonitorOutputWithContext(context.Background())
}

func (i CertManagerPrometheusServiceMonitorArgs) ToCertManagerPrometheusServiceMonitorOutputWithContext(ctx context.Context) CertManagerPrometheusServiceMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerPrometheusServiceMonitorOutput)
}

func (i CertManagerPrometheusServiceMonitorArgs) ToCertManagerPrometheusServiceMonitorPtrOutput() CertManagerPrometheusServiceMonitorPtrOutput {
	return i.ToCertManagerPrometheusServiceMonitorPtrOutputWithContext(context.Background())
}

func (i CertManagerPrometheusServiceMonitorArgs) ToCertManagerPrometheusServiceMonitorPtrOutputWithContext(ctx context.Context) CertManagerPrometheusServiceMonitorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerPrometheusServiceMonitorOutput).ToCertManagerPrometheusServiceMonitorPtrOutputWithContext(ctx)
}

// CertManagerPrometheusServiceMonitorPtrInput is an input type that accepts CertManagerPrometheusServiceMonitorArgs, CertManagerPrometheusServiceMonitorPtr and CertManagerPrometheusServiceMonitorPtrOutput values.
// You can construct a concrete instance of `CertManagerPrometheusServiceMonitorPtrInput` via:
//
//	        CertManagerPrometheusServiceMonitorArgs{...}
//
//	or:
//
//	        nil
type CertManagerPrometheusServiceMonitorPtrInput interface {
	pulumi.Input

	ToCertManagerPrometheusServiceMonitorPtrOutput() CertManagerPrometheusServiceMonitorPtrOutput
	ToCertManagerPrometheusServiceMonitorPtrOutputWithContext(context.Context) CertManagerPrometheusServiceMonitorPtrOutput
}

type certManagerPrometheusServiceMonitorPtrType CertManagerPrometheusServiceMonitorArgs

func CertManagerPrometheusServiceMonitorPtr(v *CertManagerPrometheusServiceMonitorArgs) CertManagerPrometheusServiceMonitorPtrInput {
	return (*certManagerPrometheusServiceMonitorPtrType)(v)
}

func (*certManagerPrometheusServiceMonitorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerPrometheusServiceMonitor)(nil)).Elem()
}

func (i *certManagerPrometheusServiceMonitorPtrType) ToCertManagerPrometheusServiceMonitorPtrOutput() CertManagerPrometheusServiceMonitorPtrOutput {
	return i.ToCertManagerPrometheusServiceMonitorPtrOutputWithContext(context.Background())
}

func (i *certManagerPrometheusServiceMonitorPtrType) ToCertManagerPrometheusServiceMonitorPtrOutputWithContext(ctx context.Context) CertManagerPrometheusServiceMonitorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerPrometheusServiceMonitorPtrOutput)
}

type CertManagerPrometheusServiceMonitorOutput struct{ *pulumi.OutputState }

func (CertManagerPrometheusServiceMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerPrometheusServiceMonitor)(nil)).Elem()
}

func (o CertManagerPrometheusServiceMonitorOutput) ToCertManagerPrometheusServiceMonitorOutput() CertManagerPrometheusServiceMonitorOutput {
	return o
}

func (o CertManagerPrometheusServiceMonitorOutput) ToCertManagerPrometheusServiceMonitorOutputWithContext(ctx context.Context) CertManagerPrometheusServiceMonitorOutput {
	return o
}

func (o CertManagerPrometheusServiceMonitorOutput) ToCertManagerPrometheusServiceMonitorPtrOutput() CertManagerPrometheusServiceMonitorPtrOutput {
	return o.ToCertManagerPrometheusServiceMonitorPtrOutputWithContext(context.Background())
}

func (o CertManagerPrometheusServiceMonitorOutput) ToCertManagerPrometheusServiceMonitorPtrOutputWithContext(ctx context.Context) CertManagerPrometheusServiceMonitorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerPrometheusServiceMonitor) *CertManagerPrometheusServiceMonitor {
		return &v
	}).(CertManagerPrometheusServiceMonitorPtrOutput)
}

func (o CertManagerPrometheusServiceMonitorOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CertManagerPrometheusServiceMonitor) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o CertManagerPrometheusServiceMonitorOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerPrometheusServiceMonitor) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o CertManagerPrometheusServiceMonitorOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerPrometheusServiceMonitor) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o CertManagerPrometheusServiceMonitorOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerPrometheusServiceMonitor) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o CertManagerPrometheusServiceMonitorOutput) PrometheusInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerPrometheusServiceMonitor) *string { return v.PrometheusInstance }).(pulumi.StringPtrOutput)
}

func (o CertManagerPrometheusServiceMonitorOutput) String() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerPrometheusServiceMonitor) *string { return v.String }).(pulumi.StringPtrOutput)
}

func (o CertManagerPrometheusServiceMonitorOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertManagerPrometheusServiceMonitor) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

type CertManagerPrometheusServiceMonitorPtrOutput struct{ *pulumi.OutputState }

func (CertManagerPrometheusServiceMonitorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerPrometheusServiceMonitor)(nil)).Elem()
}

func (o CertManagerPrometheusServiceMonitorPtrOutput) ToCertManagerPrometheusServiceMonitorPtrOutput() CertManagerPrometheusServiceMonitorPtrOutput {
	return o
}

func (o CertManagerPrometheusServiceMonitorPtrOutput) ToCertManagerPrometheusServiceMonitorPtrOutputWithContext(ctx context.Context) CertManagerPrometheusServiceMonitorPtrOutput {
	return o
}

func (o CertManagerPrometheusServiceMonitorPtrOutput) Elem() CertManagerPrometheusServiceMonitorOutput {
	return o.ApplyT(func(v *CertManagerPrometheusServiceMonitor) CertManagerPrometheusServiceMonitor {
		if v != nil {
			return *v
		}
		var ret CertManagerPrometheusServiceMonitor
		return ret
	}).(CertManagerPrometheusServiceMonitorOutput)
}

func (o CertManagerPrometheusServiceMonitorPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertManagerPrometheusServiceMonitor) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o CertManagerPrometheusServiceMonitorPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerPrometheusServiceMonitor) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o CertManagerPrometheusServiceMonitorPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerPrometheusServiceMonitor) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o CertManagerPrometheusServiceMonitorPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerPrometheusServiceMonitor) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

func (o CertManagerPrometheusServiceMonitorPtrOutput) PrometheusInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerPrometheusServiceMonitor) *string {
		if v == nil {
			return nil
		}
		return v.PrometheusInstance
	}).(pulumi.StringPtrOutput)
}

func (o CertManagerPrometheusServiceMonitorPtrOutput) String() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerPrometheusServiceMonitor) *string {
		if v == nil {
			return nil
		}
		return v.String
	}).(pulumi.StringPtrOutput)
}

func (o CertManagerPrometheusServiceMonitorPtrOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertManagerPrometheusServiceMonitor) *int {
		if v == nil {
			return nil
		}
		return v.TargetPort
	}).(pulumi.IntPtrOutput)
}

type CertManagerServiceAccount struct {
	// Optional additional annotations to add to the controller's ServiceAccount.
	Annotations map[string]string `pulumi:"annotations"`
	// Automount API credentials for a Service Account.
	AutomountServiceAccountToken *bool `pulumi:"automountServiceAccountToken"`
	// Specifies whether a service account should be created
	Create *bool `pulumi:"create"`
	// The name of the service account to use. If not set and create is true, a name is generated using the fullname template.
	Name *string `pulumi:"name"`
}

// CertManagerServiceAccountInput is an input type that accepts CertManagerServiceAccountArgs and CertManagerServiceAccountOutput values.
// You can construct a concrete instance of `CertManagerServiceAccountInput` via:
//
//	CertManagerServiceAccountArgs{...}
type CertManagerServiceAccountInput interface {
	pulumi.Input

	ToCertManagerServiceAccountOutput() CertManagerServiceAccountOutput
	ToCertManagerServiceAccountOutputWithContext(context.Context) CertManagerServiceAccountOutput
}

type CertManagerServiceAccountArgs struct {
	// Optional additional annotations to add to the controller's ServiceAccount.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Automount API credentials for a Service Account.
	AutomountServiceAccountToken pulumi.BoolPtrInput `pulumi:"automountServiceAccountToken"`
	// Specifies whether a service account should be created
	Create pulumi.BoolPtrInput `pulumi:"create"`
	// The name of the service account to use. If not set and create is true, a name is generated using the fullname template.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CertManagerServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerServiceAccount)(nil)).Elem()
}

func (i CertManagerServiceAccountArgs) ToCertManagerServiceAccountOutput() CertManagerServiceAccountOutput {
	return i.ToCertManagerServiceAccountOutputWithContext(context.Background())
}

func (i CertManagerServiceAccountArgs) ToCertManagerServiceAccountOutputWithContext(ctx context.Context) CertManagerServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerServiceAccountOutput)
}

func (i CertManagerServiceAccountArgs) ToCertManagerServiceAccountPtrOutput() CertManagerServiceAccountPtrOutput {
	return i.ToCertManagerServiceAccountPtrOutputWithContext(context.Background())
}

func (i CertManagerServiceAccountArgs) ToCertManagerServiceAccountPtrOutputWithContext(ctx context.Context) CertManagerServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerServiceAccountOutput).ToCertManagerServiceAccountPtrOutputWithContext(ctx)
}

// CertManagerServiceAccountPtrInput is an input type that accepts CertManagerServiceAccountArgs, CertManagerServiceAccountPtr and CertManagerServiceAccountPtrOutput values.
// You can construct a concrete instance of `CertManagerServiceAccountPtrInput` via:
//
//	        CertManagerServiceAccountArgs{...}
//
//	or:
//
//	        nil
type CertManagerServiceAccountPtrInput interface {
	pulumi.Input

	ToCertManagerServiceAccountPtrOutput() CertManagerServiceAccountPtrOutput
	ToCertManagerServiceAccountPtrOutputWithContext(context.Context) CertManagerServiceAccountPtrOutput
}

type certManagerServiceAccountPtrType CertManagerServiceAccountArgs

func CertManagerServiceAccountPtr(v *CertManagerServiceAccountArgs) CertManagerServiceAccountPtrInput {
	return (*certManagerServiceAccountPtrType)(v)
}

func (*certManagerServiceAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerServiceAccount)(nil)).Elem()
}

func (i *certManagerServiceAccountPtrType) ToCertManagerServiceAccountPtrOutput() CertManagerServiceAccountPtrOutput {
	return i.ToCertManagerServiceAccountPtrOutputWithContext(context.Background())
}

func (i *certManagerServiceAccountPtrType) ToCertManagerServiceAccountPtrOutputWithContext(ctx context.Context) CertManagerServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerServiceAccountPtrOutput)
}

type CertManagerServiceAccountOutput struct{ *pulumi.OutputState }

func (CertManagerServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerServiceAccount)(nil)).Elem()
}

func (o CertManagerServiceAccountOutput) ToCertManagerServiceAccountOutput() CertManagerServiceAccountOutput {
	return o
}

func (o CertManagerServiceAccountOutput) ToCertManagerServiceAccountOutputWithContext(ctx context.Context) CertManagerServiceAccountOutput {
	return o
}

func (o CertManagerServiceAccountOutput) ToCertManagerServiceAccountPtrOutput() CertManagerServiceAccountPtrOutput {
	return o.ToCertManagerServiceAccountPtrOutputWithContext(context.Background())
}

func (o CertManagerServiceAccountOutput) ToCertManagerServiceAccountPtrOutputWithContext(ctx context.Context) CertManagerServiceAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerServiceAccount) *CertManagerServiceAccount {
		return &v
	}).(CertManagerServiceAccountPtrOutput)
}

// Optional additional annotations to add to the controller's ServiceAccount.
func (o CertManagerServiceAccountOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerServiceAccount) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Automount API credentials for a Service Account.
func (o CertManagerServiceAccountOutput) AutomountServiceAccountToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CertManagerServiceAccount) *bool { return v.AutomountServiceAccountToken }).(pulumi.BoolPtrOutput)
}

// Specifies whether a service account should be created
func (o CertManagerServiceAccountOutput) Create() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CertManagerServiceAccount) *bool { return v.Create }).(pulumi.BoolPtrOutput)
}

// The name of the service account to use. If not set and create is true, a name is generated using the fullname template.
func (o CertManagerServiceAccountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerServiceAccount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CertManagerServiceAccountPtrOutput struct{ *pulumi.OutputState }

func (CertManagerServiceAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerServiceAccount)(nil)).Elem()
}

func (o CertManagerServiceAccountPtrOutput) ToCertManagerServiceAccountPtrOutput() CertManagerServiceAccountPtrOutput {
	return o
}

func (o CertManagerServiceAccountPtrOutput) ToCertManagerServiceAccountPtrOutputWithContext(ctx context.Context) CertManagerServiceAccountPtrOutput {
	return o
}

func (o CertManagerServiceAccountPtrOutput) Elem() CertManagerServiceAccountOutput {
	return o.ApplyT(func(v *CertManagerServiceAccount) CertManagerServiceAccount {
		if v != nil {
			return *v
		}
		var ret CertManagerServiceAccount
		return ret
	}).(CertManagerServiceAccountOutput)
}

// Optional additional annotations to add to the controller's ServiceAccount.
func (o CertManagerServiceAccountPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerServiceAccount) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Automount API credentials for a Service Account.
func (o CertManagerServiceAccountPtrOutput) AutomountServiceAccountToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertManagerServiceAccount) *bool {
		if v == nil {
			return nil
		}
		return v.AutomountServiceAccountToken
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether a service account should be created
func (o CertManagerServiceAccountPtrOutput) Create() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertManagerServiceAccount) *bool {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.BoolPtrOutput)
}

// The name of the service account to use. If not set and create is true, a name is generated using the fullname template.
func (o CertManagerServiceAccountPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type CertManagerStartupAPICheck struct {
	Affinity *corev1.Affinity `pulumi:"affinity"`
	// Job backoffLimit
	BackoffLimit *int  `pulumi:"backoffLimit"`
	Enabled      *bool `pulumi:"enabled"`
	// Optional additional arguments for startupapicheck
	ExtraArgs []string          `pulumi:"extraArgs"`
	Image     *CertManagerImage `pulumi:"image"`
	// Optional additional annotations to add to the startupapicheck Job
	JobAnnotations map[string]string `pulumi:"jobAnnotations"`
	NodeSelector   map[string]string `pulumi:"nodeSelector"`
	// Optional additional annotations to add to the startupapicheck Pods
	PodAnnotations map[string]string `pulumi:"podAnnotations"`
	// Optional additional labels to add to the startupapicheck Pods
	PodLabels map[string]string               `pulumi:"podLabels"`
	Rbac      *CertManagerStartupAPICheckRBAC `pulumi:"rbac"`
	Resources *corev1.ResourceRequirements    `pulumi:"resources"`
	// Pod Security Context to be set on the startupapicheck component Pod. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext *corev1.PodSecurityContext `pulumi:"securityContext"`
	ServiceAccount  *CertManagerServiceAccount `pulumi:"serviceAccount"`
	// Timeout for 'kubectl check api' command
	Timeout     *string             `pulumi:"timeout"`
	Tolerations []corev1.Toleration `pulumi:"tolerations"`
}

// CertManagerStartupAPICheckInput is an input type that accepts CertManagerStartupAPICheckArgs and CertManagerStartupAPICheckOutput values.
// You can construct a concrete instance of `CertManagerStartupAPICheckInput` via:
//
//	CertManagerStartupAPICheckArgs{...}
type CertManagerStartupAPICheckInput interface {
	pulumi.Input

	ToCertManagerStartupAPICheckOutput() CertManagerStartupAPICheckOutput
	ToCertManagerStartupAPICheckOutputWithContext(context.Context) CertManagerStartupAPICheckOutput
}

type CertManagerStartupAPICheckArgs struct {
	Affinity corev1.AffinityPtrInput `pulumi:"affinity"`
	// Job backoffLimit
	BackoffLimit pulumi.IntPtrInput  `pulumi:"backoffLimit"`
	Enabled      pulumi.BoolPtrInput `pulumi:"enabled"`
	// Optional additional arguments for startupapicheck
	ExtraArgs pulumi.StringArrayInput  `pulumi:"extraArgs"`
	Image     CertManagerImagePtrInput `pulumi:"image"`
	// Optional additional annotations to add to the startupapicheck Job
	JobAnnotations pulumi.StringMapInput `pulumi:"jobAnnotations"`
	NodeSelector   pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Optional additional annotations to add to the startupapicheck Pods
	PodAnnotations pulumi.StringMapInput `pulumi:"podAnnotations"`
	// Optional additional labels to add to the startupapicheck Pods
	PodLabels pulumi.StringMapInput                  `pulumi:"podLabels"`
	Rbac      CertManagerStartupAPICheckRBACPtrInput `pulumi:"rbac"`
	Resources corev1.ResourceRequirementsPtrInput    `pulumi:"resources"`
	// Pod Security Context to be set on the startupapicheck component Pod. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext corev1.PodSecurityContextPtrInput `pulumi:"securityContext"`
	ServiceAccount  CertManagerServiceAccountPtrInput `pulumi:"serviceAccount"`
	// Timeout for 'kubectl check api' command
	Timeout     pulumi.StringPtrInput       `pulumi:"timeout"`
	Tolerations corev1.TolerationArrayInput `pulumi:"tolerations"`
}

func (CertManagerStartupAPICheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerStartupAPICheck)(nil)).Elem()
}

func (i CertManagerStartupAPICheckArgs) ToCertManagerStartupAPICheckOutput() CertManagerStartupAPICheckOutput {
	return i.ToCertManagerStartupAPICheckOutputWithContext(context.Background())
}

func (i CertManagerStartupAPICheckArgs) ToCertManagerStartupAPICheckOutputWithContext(ctx context.Context) CertManagerStartupAPICheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerStartupAPICheckOutput)
}

func (i CertManagerStartupAPICheckArgs) ToCertManagerStartupAPICheckPtrOutput() CertManagerStartupAPICheckPtrOutput {
	return i.ToCertManagerStartupAPICheckPtrOutputWithContext(context.Background())
}

func (i CertManagerStartupAPICheckArgs) ToCertManagerStartupAPICheckPtrOutputWithContext(ctx context.Context) CertManagerStartupAPICheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerStartupAPICheckOutput).ToCertManagerStartupAPICheckPtrOutputWithContext(ctx)
}

// CertManagerStartupAPICheckPtrInput is an input type that accepts CertManagerStartupAPICheckArgs, CertManagerStartupAPICheckPtr and CertManagerStartupAPICheckPtrOutput values.
// You can construct a concrete instance of `CertManagerStartupAPICheckPtrInput` via:
//
//	        CertManagerStartupAPICheckArgs{...}
//
//	or:
//
//	        nil
type CertManagerStartupAPICheckPtrInput interface {
	pulumi.Input

	ToCertManagerStartupAPICheckPtrOutput() CertManagerStartupAPICheckPtrOutput
	ToCertManagerStartupAPICheckPtrOutputWithContext(context.Context) CertManagerStartupAPICheckPtrOutput
}

type certManagerStartupAPICheckPtrType CertManagerStartupAPICheckArgs

func CertManagerStartupAPICheckPtr(v *CertManagerStartupAPICheckArgs) CertManagerStartupAPICheckPtrInput {
	return (*certManagerStartupAPICheckPtrType)(v)
}

func (*certManagerStartupAPICheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerStartupAPICheck)(nil)).Elem()
}

func (i *certManagerStartupAPICheckPtrType) ToCertManagerStartupAPICheckPtrOutput() CertManagerStartupAPICheckPtrOutput {
	return i.ToCertManagerStartupAPICheckPtrOutputWithContext(context.Background())
}

func (i *certManagerStartupAPICheckPtrType) ToCertManagerStartupAPICheckPtrOutputWithContext(ctx context.Context) CertManagerStartupAPICheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerStartupAPICheckPtrOutput)
}

type CertManagerStartupAPICheckOutput struct{ *pulumi.OutputState }

func (CertManagerStartupAPICheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerStartupAPICheck)(nil)).Elem()
}

func (o CertManagerStartupAPICheckOutput) ToCertManagerStartupAPICheckOutput() CertManagerStartupAPICheckOutput {
	return o
}

func (o CertManagerStartupAPICheckOutput) ToCertManagerStartupAPICheckOutputWithContext(ctx context.Context) CertManagerStartupAPICheckOutput {
	return o
}

func (o CertManagerStartupAPICheckOutput) ToCertManagerStartupAPICheckPtrOutput() CertManagerStartupAPICheckPtrOutput {
	return o.ToCertManagerStartupAPICheckPtrOutputWithContext(context.Background())
}

func (o CertManagerStartupAPICheckOutput) ToCertManagerStartupAPICheckPtrOutputWithContext(ctx context.Context) CertManagerStartupAPICheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerStartupAPICheck) *CertManagerStartupAPICheck {
		return &v
	}).(CertManagerStartupAPICheckPtrOutput)
}

func (o CertManagerStartupAPICheckOutput) Affinity() corev1.AffinityPtrOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheck) *corev1.Affinity { return v.Affinity }).(corev1.AffinityPtrOutput)
}

// Job backoffLimit
func (o CertManagerStartupAPICheckOutput) BackoffLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheck) *int { return v.BackoffLimit }).(pulumi.IntPtrOutput)
}

func (o CertManagerStartupAPICheckOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheck) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Optional additional arguments for startupapicheck
func (o CertManagerStartupAPICheckOutput) ExtraArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheck) []string { return v.ExtraArgs }).(pulumi.StringArrayOutput)
}

func (o CertManagerStartupAPICheckOutput) Image() CertManagerImagePtrOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheck) *CertManagerImage { return v.Image }).(CertManagerImagePtrOutput)
}

// Optional additional annotations to add to the startupapicheck Job
func (o CertManagerStartupAPICheckOutput) JobAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheck) map[string]string { return v.JobAnnotations }).(pulumi.StringMapOutput)
}

func (o CertManagerStartupAPICheckOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheck) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Optional additional annotations to add to the startupapicheck Pods
func (o CertManagerStartupAPICheckOutput) PodAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheck) map[string]string { return v.PodAnnotations }).(pulumi.StringMapOutput)
}

// Optional additional labels to add to the startupapicheck Pods
func (o CertManagerStartupAPICheckOutput) PodLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheck) map[string]string { return v.PodLabels }).(pulumi.StringMapOutput)
}

func (o CertManagerStartupAPICheckOutput) Rbac() CertManagerStartupAPICheckRBACPtrOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheck) *CertManagerStartupAPICheckRBAC { return v.Rbac }).(CertManagerStartupAPICheckRBACPtrOutput)
}

func (o CertManagerStartupAPICheckOutput) Resources() corev1.ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheck) *corev1.ResourceRequirements { return v.Resources }).(corev1.ResourceRequirementsPtrOutput)
}

// Pod Security Context to be set on the startupapicheck component Pod. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o CertManagerStartupAPICheckOutput) SecurityContext() corev1.PodSecurityContextPtrOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheck) *corev1.PodSecurityContext { return v.SecurityContext }).(corev1.PodSecurityContextPtrOutput)
}

func (o CertManagerStartupAPICheckOutput) ServiceAccount() CertManagerServiceAccountPtrOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheck) *CertManagerServiceAccount { return v.ServiceAccount }).(CertManagerServiceAccountPtrOutput)
}

// Timeout for 'kubectl check api' command
func (o CertManagerStartupAPICheckOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheck) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

func (o CertManagerStartupAPICheckOutput) Tolerations() corev1.TolerationArrayOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheck) []corev1.Toleration { return v.Tolerations }).(corev1.TolerationArrayOutput)
}

type CertManagerStartupAPICheckPtrOutput struct{ *pulumi.OutputState }

func (CertManagerStartupAPICheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerStartupAPICheck)(nil)).Elem()
}

func (o CertManagerStartupAPICheckPtrOutput) ToCertManagerStartupAPICheckPtrOutput() CertManagerStartupAPICheckPtrOutput {
	return o
}

func (o CertManagerStartupAPICheckPtrOutput) ToCertManagerStartupAPICheckPtrOutputWithContext(ctx context.Context) CertManagerStartupAPICheckPtrOutput {
	return o
}

func (o CertManagerStartupAPICheckPtrOutput) Elem() CertManagerStartupAPICheckOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) CertManagerStartupAPICheck {
		if v != nil {
			return *v
		}
		var ret CertManagerStartupAPICheck
		return ret
	}).(CertManagerStartupAPICheckOutput)
}

func (o CertManagerStartupAPICheckPtrOutput) Affinity() corev1.AffinityPtrOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) *corev1.Affinity {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(corev1.AffinityPtrOutput)
}

// Job backoffLimit
func (o CertManagerStartupAPICheckPtrOutput) BackoffLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) *int {
		if v == nil {
			return nil
		}
		return v.BackoffLimit
	}).(pulumi.IntPtrOutput)
}

func (o CertManagerStartupAPICheckPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Optional additional arguments for startupapicheck
func (o CertManagerStartupAPICheckPtrOutput) ExtraArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) []string {
		if v == nil {
			return nil
		}
		return v.ExtraArgs
	}).(pulumi.StringArrayOutput)
}

func (o CertManagerStartupAPICheckPtrOutput) Image() CertManagerImagePtrOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) *CertManagerImage {
		if v == nil {
			return nil
		}
		return v.Image
	}).(CertManagerImagePtrOutput)
}

// Optional additional annotations to add to the startupapicheck Job
func (o CertManagerStartupAPICheckPtrOutput) JobAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) map[string]string {
		if v == nil {
			return nil
		}
		return v.JobAnnotations
	}).(pulumi.StringMapOutput)
}

func (o CertManagerStartupAPICheckPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Optional additional annotations to add to the startupapicheck Pods
func (o CertManagerStartupAPICheckPtrOutput) PodAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) map[string]string {
		if v == nil {
			return nil
		}
		return v.PodAnnotations
	}).(pulumi.StringMapOutput)
}

// Optional additional labels to add to the startupapicheck Pods
func (o CertManagerStartupAPICheckPtrOutput) PodLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) map[string]string {
		if v == nil {
			return nil
		}
		return v.PodLabels
	}).(pulumi.StringMapOutput)
}

func (o CertManagerStartupAPICheckPtrOutput) Rbac() CertManagerStartupAPICheckRBACPtrOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) *CertManagerStartupAPICheckRBAC {
		if v == nil {
			return nil
		}
		return v.Rbac
	}).(CertManagerStartupAPICheckRBACPtrOutput)
}

func (o CertManagerStartupAPICheckPtrOutput) Resources() corev1.ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) *corev1.ResourceRequirements {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(corev1.ResourceRequirementsPtrOutput)
}

// Pod Security Context to be set on the startupapicheck component Pod. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o CertManagerStartupAPICheckPtrOutput) SecurityContext() corev1.PodSecurityContextPtrOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) *corev1.PodSecurityContext {
		if v == nil {
			return nil
		}
		return v.SecurityContext
	}).(corev1.PodSecurityContextPtrOutput)
}

func (o CertManagerStartupAPICheckPtrOutput) ServiceAccount() CertManagerServiceAccountPtrOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) *CertManagerServiceAccount {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(CertManagerServiceAccountPtrOutput)
}

// Timeout for 'kubectl check api' command
func (o CertManagerStartupAPICheckPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

func (o CertManagerStartupAPICheckPtrOutput) Tolerations() corev1.TolerationArrayOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheck) []corev1.Toleration {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(corev1.TolerationArrayOutput)
}

type CertManagerStartupAPICheckRBAC struct {
	// annotations for the startup API Check job RBAC and PSP resources
	Annotations map[string]string `pulumi:"annotations"`
}

// CertManagerStartupAPICheckRBACInput is an input type that accepts CertManagerStartupAPICheckRBACArgs and CertManagerStartupAPICheckRBACOutput values.
// You can construct a concrete instance of `CertManagerStartupAPICheckRBACInput` via:
//
//	CertManagerStartupAPICheckRBACArgs{...}
type CertManagerStartupAPICheckRBACInput interface {
	pulumi.Input

	ToCertManagerStartupAPICheckRBACOutput() CertManagerStartupAPICheckRBACOutput
	ToCertManagerStartupAPICheckRBACOutputWithContext(context.Context) CertManagerStartupAPICheckRBACOutput
}

type CertManagerStartupAPICheckRBACArgs struct {
	// annotations for the startup API Check job RBAC and PSP resources
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
}

func (CertManagerStartupAPICheckRBACArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerStartupAPICheckRBAC)(nil)).Elem()
}

func (i CertManagerStartupAPICheckRBACArgs) ToCertManagerStartupAPICheckRBACOutput() CertManagerStartupAPICheckRBACOutput {
	return i.ToCertManagerStartupAPICheckRBACOutputWithContext(context.Background())
}

func (i CertManagerStartupAPICheckRBACArgs) ToCertManagerStartupAPICheckRBACOutputWithContext(ctx context.Context) CertManagerStartupAPICheckRBACOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerStartupAPICheckRBACOutput)
}

func (i CertManagerStartupAPICheckRBACArgs) ToCertManagerStartupAPICheckRBACPtrOutput() CertManagerStartupAPICheckRBACPtrOutput {
	return i.ToCertManagerStartupAPICheckRBACPtrOutputWithContext(context.Background())
}

func (i CertManagerStartupAPICheckRBACArgs) ToCertManagerStartupAPICheckRBACPtrOutputWithContext(ctx context.Context) CertManagerStartupAPICheckRBACPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerStartupAPICheckRBACOutput).ToCertManagerStartupAPICheckRBACPtrOutputWithContext(ctx)
}

// CertManagerStartupAPICheckRBACPtrInput is an input type that accepts CertManagerStartupAPICheckRBACArgs, CertManagerStartupAPICheckRBACPtr and CertManagerStartupAPICheckRBACPtrOutput values.
// You can construct a concrete instance of `CertManagerStartupAPICheckRBACPtrInput` via:
//
//	        CertManagerStartupAPICheckRBACArgs{...}
//
//	or:
//
//	        nil
type CertManagerStartupAPICheckRBACPtrInput interface {
	pulumi.Input

	ToCertManagerStartupAPICheckRBACPtrOutput() CertManagerStartupAPICheckRBACPtrOutput
	ToCertManagerStartupAPICheckRBACPtrOutputWithContext(context.Context) CertManagerStartupAPICheckRBACPtrOutput
}

type certManagerStartupAPICheckRBACPtrType CertManagerStartupAPICheckRBACArgs

func CertManagerStartupAPICheckRBACPtr(v *CertManagerStartupAPICheckRBACArgs) CertManagerStartupAPICheckRBACPtrInput {
	return (*certManagerStartupAPICheckRBACPtrType)(v)
}

func (*certManagerStartupAPICheckRBACPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerStartupAPICheckRBAC)(nil)).Elem()
}

func (i *certManagerStartupAPICheckRBACPtrType) ToCertManagerStartupAPICheckRBACPtrOutput() CertManagerStartupAPICheckRBACPtrOutput {
	return i.ToCertManagerStartupAPICheckRBACPtrOutputWithContext(context.Background())
}

func (i *certManagerStartupAPICheckRBACPtrType) ToCertManagerStartupAPICheckRBACPtrOutputWithContext(ctx context.Context) CertManagerStartupAPICheckRBACPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerStartupAPICheckRBACPtrOutput)
}

type CertManagerStartupAPICheckRBACOutput struct{ *pulumi.OutputState }

func (CertManagerStartupAPICheckRBACOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerStartupAPICheckRBAC)(nil)).Elem()
}

func (o CertManagerStartupAPICheckRBACOutput) ToCertManagerStartupAPICheckRBACOutput() CertManagerStartupAPICheckRBACOutput {
	return o
}

func (o CertManagerStartupAPICheckRBACOutput) ToCertManagerStartupAPICheckRBACOutputWithContext(ctx context.Context) CertManagerStartupAPICheckRBACOutput {
	return o
}

func (o CertManagerStartupAPICheckRBACOutput) ToCertManagerStartupAPICheckRBACPtrOutput() CertManagerStartupAPICheckRBACPtrOutput {
	return o.ToCertManagerStartupAPICheckRBACPtrOutputWithContext(context.Background())
}

func (o CertManagerStartupAPICheckRBACOutput) ToCertManagerStartupAPICheckRBACPtrOutputWithContext(ctx context.Context) CertManagerStartupAPICheckRBACPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerStartupAPICheckRBAC) *CertManagerStartupAPICheckRBAC {
		return &v
	}).(CertManagerStartupAPICheckRBACPtrOutput)
}

// annotations for the startup API Check job RBAC and PSP resources
func (o CertManagerStartupAPICheckRBACOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerStartupAPICheckRBAC) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

type CertManagerStartupAPICheckRBACPtrOutput struct{ *pulumi.OutputState }

func (CertManagerStartupAPICheckRBACPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerStartupAPICheckRBAC)(nil)).Elem()
}

func (o CertManagerStartupAPICheckRBACPtrOutput) ToCertManagerStartupAPICheckRBACPtrOutput() CertManagerStartupAPICheckRBACPtrOutput {
	return o
}

func (o CertManagerStartupAPICheckRBACPtrOutput) ToCertManagerStartupAPICheckRBACPtrOutputWithContext(ctx context.Context) CertManagerStartupAPICheckRBACPtrOutput {
	return o
}

func (o CertManagerStartupAPICheckRBACPtrOutput) Elem() CertManagerStartupAPICheckRBACOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheckRBAC) CertManagerStartupAPICheckRBAC {
		if v != nil {
			return *v
		}
		var ret CertManagerStartupAPICheckRBAC
		return ret
	}).(CertManagerStartupAPICheckRBACOutput)
}

// annotations for the startup API Check job RBAC and PSP resources
func (o CertManagerStartupAPICheckRBACPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerStartupAPICheckRBAC) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

type CertManagerWebhook struct {
	Affinity *corev1.Affinity `pulumi:"affinity"`
	// Container Security Context to be set on the webhook component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	ContainerSecurityContext *corev1.SecurityContext `pulumi:"containerSecurityContext"`
	// Optional additional annotations to add to the webhook Deployment
	DeploymentAnnotations map[string]string `pulumi:"deploymentAnnotations"`
	// Optional additional arguments for webhook
	ExtraArgs []string `pulumi:"extraArgs"`
	// Specifies if the webhook should be started in hostNetwork mode. Required for use in some managed kubernetes clusters (such as AWS EKS) with custom CNI (such as calico), because control-plane managed by AWS cannot communicate with pods' IP CIDR and admission webhooks are not working Since the default port for the webhook conflicts with kubelet on the host network, `webhook.securePort` should be changed to an available port if running in hostNetwork mode.
	HostNetwork *bool             `pulumi:"hostNetwork"`
	Image       *CertManagerImage `pulumi:"image"`
	// Liveness probe values. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
	LivenessProbe  *corev1.Probe `pulumi:"livenessProbe"`
	LoadBalancerIP *string       `pulumi:"loadBalancerIP"`
	// Optional additional annotations to add to the webhook MutatingWebhookConfiguration
	MutatingWebhookConfigurationAnnotations map[string]string `pulumi:"mutatingWebhookConfigurationAnnotations"`
	NodeSelector                            map[string]string `pulumi:"nodeSelector"`
	// Optional additional annotations to add to the webhook Pods
	PodAnnotations map[string]string `pulumi:"podAnnotations"`
	// Optional additional labels to add to the Webhook Pods
	PodLabels map[string]string `pulumi:"podLabels"`
	// Readiness probe values. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
	ReadinessProbe *corev1.Probe                `pulumi:"readinessProbe"`
	ReplicaCount   *int                         `pulumi:"replicaCount"`
	Resources      *corev1.ResourceRequirements `pulumi:"resources"`
	// The port that the webhook should listen on for requests. In GKE private clusters, by default kubernetes apiservers are allowed to talk to the cluster nodes only on 443 and 10250. so configuring securePort: 10250, will work out of the box without needing to add firewall rules or requiring NET_BIND_SERVICE capabilities to bind port numbers <1000
	SecurePort *int `pulumi:"securePort"`
	// Pod Security Context to be set on the webhook component Pod. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext *corev1.PodSecurityContext `pulumi:"securityContext"`
	ServiceAccount  *CertManagerServiceAccount `pulumi:"serviceAccount"`
	// Optional additional annotations to add to the webhook service
	ServiceAnnotations map[string]string `pulumi:"serviceAnnotations"`
	// Optional additional labels to add to the Webhook Service
	ServiceLabels map[string]string `pulumi:"serviceLabels"`
	// Specifies how the service should be handled. Useful if you want to expose the webhook to outside of the cluster. In some cases, the control plane cannot reach internal services.
	ServiceType    *string                    `pulumi:"serviceType"`
	Strategy       *appsv1.DeploymentStrategy `pulumi:"strategy"`
	TimeoutSeconds *int                       `pulumi:"timeoutSeconds"`
	Tolerations    []corev1.Toleration        `pulumi:"tolerations"`
	// Overrides the mutating webhook and validating webhook so they reach the webhook service using the `url` field instead of a service.
	Url *CertManagerWebhookURL `pulumi:"url"`
	// Optional additional annotations to add to the webhook ValidatingWebhookConfiguration
	ValidatingWebhookConfigurationAnnotations map[string]string `pulumi:"validatingWebhookConfigurationAnnotations"`
}

// CertManagerWebhookInput is an input type that accepts CertManagerWebhookArgs and CertManagerWebhookOutput values.
// You can construct a concrete instance of `CertManagerWebhookInput` via:
//
//	CertManagerWebhookArgs{...}
type CertManagerWebhookInput interface {
	pulumi.Input

	ToCertManagerWebhookOutput() CertManagerWebhookOutput
	ToCertManagerWebhookOutputWithContext(context.Context) CertManagerWebhookOutput
}

type CertManagerWebhookArgs struct {
	Affinity corev1.AffinityPtrInput `pulumi:"affinity"`
	// Container Security Context to be set on the webhook component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	ContainerSecurityContext corev1.SecurityContextPtrInput `pulumi:"containerSecurityContext"`
	// Optional additional annotations to add to the webhook Deployment
	DeploymentAnnotations pulumi.StringMapInput `pulumi:"deploymentAnnotations"`
	// Optional additional arguments for webhook
	ExtraArgs pulumi.StringArrayInput `pulumi:"extraArgs"`
	// Specifies if the webhook should be started in hostNetwork mode. Required for use in some managed kubernetes clusters (such as AWS EKS) with custom CNI (such as calico), because control-plane managed by AWS cannot communicate with pods' IP CIDR and admission webhooks are not working Since the default port for the webhook conflicts with kubelet on the host network, `webhook.securePort` should be changed to an available port if running in hostNetwork mode.
	HostNetwork pulumi.BoolPtrInput      `pulumi:"hostNetwork"`
	Image       CertManagerImagePtrInput `pulumi:"image"`
	// Liveness probe values. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
	LivenessProbe  corev1.ProbePtrInput  `pulumi:"livenessProbe"`
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// Optional additional annotations to add to the webhook MutatingWebhookConfiguration
	MutatingWebhookConfigurationAnnotations pulumi.StringMapInput `pulumi:"mutatingWebhookConfigurationAnnotations"`
	NodeSelector                            pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Optional additional annotations to add to the webhook Pods
	PodAnnotations pulumi.StringMapInput `pulumi:"podAnnotations"`
	// Optional additional labels to add to the Webhook Pods
	PodLabels pulumi.StringMapInput `pulumi:"podLabels"`
	// Readiness probe values. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
	ReadinessProbe corev1.ProbePtrInput                `pulumi:"readinessProbe"`
	ReplicaCount   pulumi.IntPtrInput                  `pulumi:"replicaCount"`
	Resources      corev1.ResourceRequirementsPtrInput `pulumi:"resources"`
	// The port that the webhook should listen on for requests. In GKE private clusters, by default kubernetes apiservers are allowed to talk to the cluster nodes only on 443 and 10250. so configuring securePort: 10250, will work out of the box without needing to add firewall rules or requiring NET_BIND_SERVICE capabilities to bind port numbers <1000
	SecurePort pulumi.IntPtrInput `pulumi:"securePort"`
	// Pod Security Context to be set on the webhook component Pod. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext corev1.PodSecurityContextPtrInput `pulumi:"securityContext"`
	ServiceAccount  CertManagerServiceAccountPtrInput `pulumi:"serviceAccount"`
	// Optional additional annotations to add to the webhook service
	ServiceAnnotations pulumi.StringMapInput `pulumi:"serviceAnnotations"`
	// Optional additional labels to add to the Webhook Service
	ServiceLabels pulumi.StringMapInput `pulumi:"serviceLabels"`
	// Specifies how the service should be handled. Useful if you want to expose the webhook to outside of the cluster. In some cases, the control plane cannot reach internal services.
	ServiceType    pulumi.StringPtrInput             `pulumi:"serviceType"`
	Strategy       appsv1.DeploymentStrategyPtrInput `pulumi:"strategy"`
	TimeoutSeconds pulumi.IntPtrInput                `pulumi:"timeoutSeconds"`
	Tolerations    corev1.TolerationArrayInput       `pulumi:"tolerations"`
	// Overrides the mutating webhook and validating webhook so they reach the webhook service using the `url` field instead of a service.
	Url CertManagerWebhookURLPtrInput `pulumi:"url"`
	// Optional additional annotations to add to the webhook ValidatingWebhookConfiguration
	ValidatingWebhookConfigurationAnnotations pulumi.StringMapInput `pulumi:"validatingWebhookConfigurationAnnotations"`
}

func (CertManagerWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerWebhook)(nil)).Elem()
}

func (i CertManagerWebhookArgs) ToCertManagerWebhookOutput() CertManagerWebhookOutput {
	return i.ToCertManagerWebhookOutputWithContext(context.Background())
}

func (i CertManagerWebhookArgs) ToCertManagerWebhookOutputWithContext(ctx context.Context) CertManagerWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerWebhookOutput)
}

func (i CertManagerWebhookArgs) ToCertManagerWebhookPtrOutput() CertManagerWebhookPtrOutput {
	return i.ToCertManagerWebhookPtrOutputWithContext(context.Background())
}

func (i CertManagerWebhookArgs) ToCertManagerWebhookPtrOutputWithContext(ctx context.Context) CertManagerWebhookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerWebhookOutput).ToCertManagerWebhookPtrOutputWithContext(ctx)
}

// CertManagerWebhookPtrInput is an input type that accepts CertManagerWebhookArgs, CertManagerWebhookPtr and CertManagerWebhookPtrOutput values.
// You can construct a concrete instance of `CertManagerWebhookPtrInput` via:
//
//	        CertManagerWebhookArgs{...}
//
//	or:
//
//	        nil
type CertManagerWebhookPtrInput interface {
	pulumi.Input

	ToCertManagerWebhookPtrOutput() CertManagerWebhookPtrOutput
	ToCertManagerWebhookPtrOutputWithContext(context.Context) CertManagerWebhookPtrOutput
}

type certManagerWebhookPtrType CertManagerWebhookArgs

func CertManagerWebhookPtr(v *CertManagerWebhookArgs) CertManagerWebhookPtrInput {
	return (*certManagerWebhookPtrType)(v)
}

func (*certManagerWebhookPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerWebhook)(nil)).Elem()
}

func (i *certManagerWebhookPtrType) ToCertManagerWebhookPtrOutput() CertManagerWebhookPtrOutput {
	return i.ToCertManagerWebhookPtrOutputWithContext(context.Background())
}

func (i *certManagerWebhookPtrType) ToCertManagerWebhookPtrOutputWithContext(ctx context.Context) CertManagerWebhookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerWebhookPtrOutput)
}

type CertManagerWebhookOutput struct{ *pulumi.OutputState }

func (CertManagerWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerWebhook)(nil)).Elem()
}

func (o CertManagerWebhookOutput) ToCertManagerWebhookOutput() CertManagerWebhookOutput {
	return o
}

func (o CertManagerWebhookOutput) ToCertManagerWebhookOutputWithContext(ctx context.Context) CertManagerWebhookOutput {
	return o
}

func (o CertManagerWebhookOutput) ToCertManagerWebhookPtrOutput() CertManagerWebhookPtrOutput {
	return o.ToCertManagerWebhookPtrOutputWithContext(context.Background())
}

func (o CertManagerWebhookOutput) ToCertManagerWebhookPtrOutputWithContext(ctx context.Context) CertManagerWebhookPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerWebhook) *CertManagerWebhook {
		return &v
	}).(CertManagerWebhookPtrOutput)
}

func (o CertManagerWebhookOutput) Affinity() corev1.AffinityPtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *corev1.Affinity { return v.Affinity }).(corev1.AffinityPtrOutput)
}

// Container Security Context to be set on the webhook component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o CertManagerWebhookOutput) ContainerSecurityContext() corev1.SecurityContextPtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *corev1.SecurityContext { return v.ContainerSecurityContext }).(corev1.SecurityContextPtrOutput)
}

// Optional additional annotations to add to the webhook Deployment
func (o CertManagerWebhookOutput) DeploymentAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerWebhook) map[string]string { return v.DeploymentAnnotations }).(pulumi.StringMapOutput)
}

// Optional additional arguments for webhook
func (o CertManagerWebhookOutput) ExtraArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertManagerWebhook) []string { return v.ExtraArgs }).(pulumi.StringArrayOutput)
}

// Specifies if the webhook should be started in hostNetwork mode. Required for use in some managed kubernetes clusters (such as AWS EKS) with custom CNI (such as calico), because control-plane managed by AWS cannot communicate with pods' IP CIDR and admission webhooks are not working Since the default port for the webhook conflicts with kubelet on the host network, `webhook.securePort` should be changed to an available port if running in hostNetwork mode.
func (o CertManagerWebhookOutput) HostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *bool { return v.HostNetwork }).(pulumi.BoolPtrOutput)
}

func (o CertManagerWebhookOutput) Image() CertManagerImagePtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *CertManagerImage { return v.Image }).(CertManagerImagePtrOutput)
}

// Liveness probe values. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
func (o CertManagerWebhookOutput) LivenessProbe() corev1.ProbePtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *corev1.Probe { return v.LivenessProbe }).(corev1.ProbePtrOutput)
}

func (o CertManagerWebhookOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// Optional additional annotations to add to the webhook MutatingWebhookConfiguration
func (o CertManagerWebhookOutput) MutatingWebhookConfigurationAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerWebhook) map[string]string { return v.MutatingWebhookConfigurationAnnotations }).(pulumi.StringMapOutput)
}

func (o CertManagerWebhookOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerWebhook) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Optional additional annotations to add to the webhook Pods
func (o CertManagerWebhookOutput) PodAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerWebhook) map[string]string { return v.PodAnnotations }).(pulumi.StringMapOutput)
}

// Optional additional labels to add to the Webhook Pods
func (o CertManagerWebhookOutput) PodLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerWebhook) map[string]string { return v.PodLabels }).(pulumi.StringMapOutput)
}

// Readiness probe values. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
func (o CertManagerWebhookOutput) ReadinessProbe() corev1.ProbePtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *corev1.Probe { return v.ReadinessProbe }).(corev1.ProbePtrOutput)
}

func (o CertManagerWebhookOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *int { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

func (o CertManagerWebhookOutput) Resources() corev1.ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *corev1.ResourceRequirements { return v.Resources }).(corev1.ResourceRequirementsPtrOutput)
}

// The port that the webhook should listen on for requests. In GKE private clusters, by default kubernetes apiservers are allowed to talk to the cluster nodes only on 443 and 10250. so configuring securePort: 10250, will work out of the box without needing to add firewall rules or requiring NET_BIND_SERVICE capabilities to bind port numbers <1000
func (o CertManagerWebhookOutput) SecurePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *int { return v.SecurePort }).(pulumi.IntPtrOutput)
}

// Pod Security Context to be set on the webhook component Pod. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o CertManagerWebhookOutput) SecurityContext() corev1.PodSecurityContextPtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *corev1.PodSecurityContext { return v.SecurityContext }).(corev1.PodSecurityContextPtrOutput)
}

func (o CertManagerWebhookOutput) ServiceAccount() CertManagerServiceAccountPtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *CertManagerServiceAccount { return v.ServiceAccount }).(CertManagerServiceAccountPtrOutput)
}

// Optional additional annotations to add to the webhook service
func (o CertManagerWebhookOutput) ServiceAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerWebhook) map[string]string { return v.ServiceAnnotations }).(pulumi.StringMapOutput)
}

// Optional additional labels to add to the Webhook Service
func (o CertManagerWebhookOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerWebhook) map[string]string { return v.ServiceLabels }).(pulumi.StringMapOutput)
}

// Specifies how the service should be handled. Useful if you want to expose the webhook to outside of the cluster. In some cases, the control plane cannot reach internal services.
func (o CertManagerWebhookOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *string { return v.ServiceType }).(pulumi.StringPtrOutput)
}

func (o CertManagerWebhookOutput) Strategy() appsv1.DeploymentStrategyPtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *appsv1.DeploymentStrategy { return v.Strategy }).(appsv1.DeploymentStrategyPtrOutput)
}

func (o CertManagerWebhookOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

func (o CertManagerWebhookOutput) Tolerations() corev1.TolerationArrayOutput {
	return o.ApplyT(func(v CertManagerWebhook) []corev1.Toleration { return v.Tolerations }).(corev1.TolerationArrayOutput)
}

// Overrides the mutating webhook and validating webhook so they reach the webhook service using the `url` field instead of a service.
func (o CertManagerWebhookOutput) Url() CertManagerWebhookURLPtrOutput {
	return o.ApplyT(func(v CertManagerWebhook) *CertManagerWebhookURL { return v.Url }).(CertManagerWebhookURLPtrOutput)
}

// Optional additional annotations to add to the webhook ValidatingWebhookConfiguration
func (o CertManagerWebhookOutput) ValidatingWebhookConfigurationAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v CertManagerWebhook) map[string]string { return v.ValidatingWebhookConfigurationAnnotations }).(pulumi.StringMapOutput)
}

type CertManagerWebhookPtrOutput struct{ *pulumi.OutputState }

func (CertManagerWebhookPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerWebhook)(nil)).Elem()
}

func (o CertManagerWebhookPtrOutput) ToCertManagerWebhookPtrOutput() CertManagerWebhookPtrOutput {
	return o
}

func (o CertManagerWebhookPtrOutput) ToCertManagerWebhookPtrOutputWithContext(ctx context.Context) CertManagerWebhookPtrOutput {
	return o
}

func (o CertManagerWebhookPtrOutput) Elem() CertManagerWebhookOutput {
	return o.ApplyT(func(v *CertManagerWebhook) CertManagerWebhook {
		if v != nil {
			return *v
		}
		var ret CertManagerWebhook
		return ret
	}).(CertManagerWebhookOutput)
}

func (o CertManagerWebhookPtrOutput) Affinity() corev1.AffinityPtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *corev1.Affinity {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(corev1.AffinityPtrOutput)
}

// Container Security Context to be set on the webhook component container. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o CertManagerWebhookPtrOutput) ContainerSecurityContext() corev1.SecurityContextPtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *corev1.SecurityContext {
		if v == nil {
			return nil
		}
		return v.ContainerSecurityContext
	}).(corev1.SecurityContextPtrOutput)
}

// Optional additional annotations to add to the webhook Deployment
func (o CertManagerWebhookPtrOutput) DeploymentAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerWebhook) map[string]string {
		if v == nil {
			return nil
		}
		return v.DeploymentAnnotations
	}).(pulumi.StringMapOutput)
}

// Optional additional arguments for webhook
func (o CertManagerWebhookPtrOutput) ExtraArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertManagerWebhook) []string {
		if v == nil {
			return nil
		}
		return v.ExtraArgs
	}).(pulumi.StringArrayOutput)
}

// Specifies if the webhook should be started in hostNetwork mode. Required for use in some managed kubernetes clusters (such as AWS EKS) with custom CNI (such as calico), because control-plane managed by AWS cannot communicate with pods' IP CIDR and admission webhooks are not working Since the default port for the webhook conflicts with kubelet on the host network, `webhook.securePort` should be changed to an available port if running in hostNetwork mode.
func (o CertManagerWebhookPtrOutput) HostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *bool {
		if v == nil {
			return nil
		}
		return v.HostNetwork
	}).(pulumi.BoolPtrOutput)
}

func (o CertManagerWebhookPtrOutput) Image() CertManagerImagePtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *CertManagerImage {
		if v == nil {
			return nil
		}
		return v.Image
	}).(CertManagerImagePtrOutput)
}

// Liveness probe values. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
func (o CertManagerWebhookPtrOutput) LivenessProbe() corev1.ProbePtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *corev1.Probe {
		if v == nil {
			return nil
		}
		return v.LivenessProbe
	}).(corev1.ProbePtrOutput)
}

func (o CertManagerWebhookPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// Optional additional annotations to add to the webhook MutatingWebhookConfiguration
func (o CertManagerWebhookPtrOutput) MutatingWebhookConfigurationAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerWebhook) map[string]string {
		if v == nil {
			return nil
		}
		return v.MutatingWebhookConfigurationAnnotations
	}).(pulumi.StringMapOutput)
}

func (o CertManagerWebhookPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerWebhook) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Optional additional annotations to add to the webhook Pods
func (o CertManagerWebhookPtrOutput) PodAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerWebhook) map[string]string {
		if v == nil {
			return nil
		}
		return v.PodAnnotations
	}).(pulumi.StringMapOutput)
}

// Optional additional labels to add to the Webhook Pods
func (o CertManagerWebhookPtrOutput) PodLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerWebhook) map[string]string {
		if v == nil {
			return nil
		}
		return v.PodLabels
	}).(pulumi.StringMapOutput)
}

// Readiness probe values. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
func (o CertManagerWebhookPtrOutput) ReadinessProbe() corev1.ProbePtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *corev1.Probe {
		if v == nil {
			return nil
		}
		return v.ReadinessProbe
	}).(corev1.ProbePtrOutput)
}

func (o CertManagerWebhookPtrOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaCount
	}).(pulumi.IntPtrOutput)
}

func (o CertManagerWebhookPtrOutput) Resources() corev1.ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *corev1.ResourceRequirements {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(corev1.ResourceRequirementsPtrOutput)
}

// The port that the webhook should listen on for requests. In GKE private clusters, by default kubernetes apiservers are allowed to talk to the cluster nodes only on 443 and 10250. so configuring securePort: 10250, will work out of the box without needing to add firewall rules or requiring NET_BIND_SERVICE capabilities to bind port numbers <1000
func (o CertManagerWebhookPtrOutput) SecurePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *int {
		if v == nil {
			return nil
		}
		return v.SecurePort
	}).(pulumi.IntPtrOutput)
}

// Pod Security Context to be set on the webhook component Pod. ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o CertManagerWebhookPtrOutput) SecurityContext() corev1.PodSecurityContextPtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *corev1.PodSecurityContext {
		if v == nil {
			return nil
		}
		return v.SecurityContext
	}).(corev1.PodSecurityContextPtrOutput)
}

func (o CertManagerWebhookPtrOutput) ServiceAccount() CertManagerServiceAccountPtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *CertManagerServiceAccount {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(CertManagerServiceAccountPtrOutput)
}

// Optional additional annotations to add to the webhook service
func (o CertManagerWebhookPtrOutput) ServiceAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerWebhook) map[string]string {
		if v == nil {
			return nil
		}
		return v.ServiceAnnotations
	}).(pulumi.StringMapOutput)
}

// Optional additional labels to add to the Webhook Service
func (o CertManagerWebhookPtrOutput) ServiceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerWebhook) map[string]string {
		if v == nil {
			return nil
		}
		return v.ServiceLabels
	}).(pulumi.StringMapOutput)
}

// Specifies how the service should be handled. Useful if you want to expose the webhook to outside of the cluster. In some cases, the control plane cannot reach internal services.
func (o CertManagerWebhookPtrOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *string {
		if v == nil {
			return nil
		}
		return v.ServiceType
	}).(pulumi.StringPtrOutput)
}

func (o CertManagerWebhookPtrOutput) Strategy() appsv1.DeploymentStrategyPtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *appsv1.DeploymentStrategy {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(appsv1.DeploymentStrategyPtrOutput)
}

func (o CertManagerWebhookPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

func (o CertManagerWebhookPtrOutput) Tolerations() corev1.TolerationArrayOutput {
	return o.ApplyT(func(v *CertManagerWebhook) []corev1.Toleration {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(corev1.TolerationArrayOutput)
}

// Overrides the mutating webhook and validating webhook so they reach the webhook service using the `url` field instead of a service.
func (o CertManagerWebhookPtrOutput) Url() CertManagerWebhookURLPtrOutput {
	return o.ApplyT(func(v *CertManagerWebhook) *CertManagerWebhookURL {
		if v == nil {
			return nil
		}
		return v.Url
	}).(CertManagerWebhookURLPtrOutput)
}

// Optional additional annotations to add to the webhook ValidatingWebhookConfiguration
func (o CertManagerWebhookPtrOutput) ValidatingWebhookConfigurationAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertManagerWebhook) map[string]string {
		if v == nil {
			return nil
		}
		return v.ValidatingWebhookConfigurationAnnotations
	}).(pulumi.StringMapOutput)
}

type CertManagerWebhookURL struct {
	Host *string `pulumi:"host"`
}

// CertManagerWebhookURLInput is an input type that accepts CertManagerWebhookURLArgs and CertManagerWebhookURLOutput values.
// You can construct a concrete instance of `CertManagerWebhookURLInput` via:
//
//	CertManagerWebhookURLArgs{...}
type CertManagerWebhookURLInput interface {
	pulumi.Input

	ToCertManagerWebhookURLOutput() CertManagerWebhookURLOutput
	ToCertManagerWebhookURLOutputWithContext(context.Context) CertManagerWebhookURLOutput
}

type CertManagerWebhookURLArgs struct {
	Host pulumi.StringPtrInput `pulumi:"host"`
}

func (CertManagerWebhookURLArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerWebhookURL)(nil)).Elem()
}

func (i CertManagerWebhookURLArgs) ToCertManagerWebhookURLOutput() CertManagerWebhookURLOutput {
	return i.ToCertManagerWebhookURLOutputWithContext(context.Background())
}

func (i CertManagerWebhookURLArgs) ToCertManagerWebhookURLOutputWithContext(ctx context.Context) CertManagerWebhookURLOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerWebhookURLOutput)
}

func (i CertManagerWebhookURLArgs) ToCertManagerWebhookURLPtrOutput() CertManagerWebhookURLPtrOutput {
	return i.ToCertManagerWebhookURLPtrOutputWithContext(context.Background())
}

func (i CertManagerWebhookURLArgs) ToCertManagerWebhookURLPtrOutputWithContext(ctx context.Context) CertManagerWebhookURLPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerWebhookURLOutput).ToCertManagerWebhookURLPtrOutputWithContext(ctx)
}

// CertManagerWebhookURLPtrInput is an input type that accepts CertManagerWebhookURLArgs, CertManagerWebhookURLPtr and CertManagerWebhookURLPtrOutput values.
// You can construct a concrete instance of `CertManagerWebhookURLPtrInput` via:
//
//	        CertManagerWebhookURLArgs{...}
//
//	or:
//
//	        nil
type CertManagerWebhookURLPtrInput interface {
	pulumi.Input

	ToCertManagerWebhookURLPtrOutput() CertManagerWebhookURLPtrOutput
	ToCertManagerWebhookURLPtrOutputWithContext(context.Context) CertManagerWebhookURLPtrOutput
}

type certManagerWebhookURLPtrType CertManagerWebhookURLArgs

func CertManagerWebhookURLPtr(v *CertManagerWebhookURLArgs) CertManagerWebhookURLPtrInput {
	return (*certManagerWebhookURLPtrType)(v)
}

func (*certManagerWebhookURLPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerWebhookURL)(nil)).Elem()
}

func (i *certManagerWebhookURLPtrType) ToCertManagerWebhookURLPtrOutput() CertManagerWebhookURLPtrOutput {
	return i.ToCertManagerWebhookURLPtrOutputWithContext(context.Background())
}

func (i *certManagerWebhookURLPtrType) ToCertManagerWebhookURLPtrOutputWithContext(ctx context.Context) CertManagerWebhookURLPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerWebhookURLPtrOutput)
}

type CertManagerWebhookURLOutput struct{ *pulumi.OutputState }

func (CertManagerWebhookURLOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerWebhookURL)(nil)).Elem()
}

func (o CertManagerWebhookURLOutput) ToCertManagerWebhookURLOutput() CertManagerWebhookURLOutput {
	return o
}

func (o CertManagerWebhookURLOutput) ToCertManagerWebhookURLOutputWithContext(ctx context.Context) CertManagerWebhookURLOutput {
	return o
}

func (o CertManagerWebhookURLOutput) ToCertManagerWebhookURLPtrOutput() CertManagerWebhookURLPtrOutput {
	return o.ToCertManagerWebhookURLPtrOutputWithContext(context.Background())
}

func (o CertManagerWebhookURLOutput) ToCertManagerWebhookURLPtrOutputWithContext(ctx context.Context) CertManagerWebhookURLPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerWebhookURL) *CertManagerWebhookURL {
		return &v
	}).(CertManagerWebhookURLPtrOutput)
}

func (o CertManagerWebhookURLOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertManagerWebhookURL) *string { return v.Host }).(pulumi.StringPtrOutput)
}

type CertManagerWebhookURLPtrOutput struct{ *pulumi.OutputState }

func (CertManagerWebhookURLPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerWebhookURL)(nil)).Elem()
}

func (o CertManagerWebhookURLPtrOutput) ToCertManagerWebhookURLPtrOutput() CertManagerWebhookURLPtrOutput {
	return o
}

func (o CertManagerWebhookURLPtrOutput) ToCertManagerWebhookURLPtrOutputWithContext(ctx context.Context) CertManagerWebhookURLPtrOutput {
	return o
}

func (o CertManagerWebhookURLPtrOutput) Elem() CertManagerWebhookURLOutput {
	return o.ApplyT(func(v *CertManagerWebhookURL) CertManagerWebhookURL {
		if v != nil {
			return *v
		}
		var ret CertManagerWebhookURL
		return ret
	}).(CertManagerWebhookURLOutput)
}

func (o CertManagerWebhookURLPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerWebhookURL) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// A Release is an instance of a chart running in a Kubernetes cluster.
// A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.
// Note - Helm Release is currently in BETA and may change. Use in production environment is discouraged.
type Release struct {
	// If set, installation process purges chart on fail. `skipAwait` will be disabled automatically if atomic is used.
	Atomic *bool `pulumi:"atomic"`
	// Chart name to be installed. A path may be used.
	Chart *string `pulumi:"chart"`
	// Allow deletion of new resources created in this upgrade when upgrade fails.
	CleanupOnFail *bool `pulumi:"cleanupOnFail"`
	// Create the namespace if it does not exist.
	CreateNamespace *bool `pulumi:"createNamespace"`
	// Run helm dependency update before installing the chart.
	DependencyUpdate *bool `pulumi:"dependencyUpdate"`
	// Add a custom description
	Description *string `pulumi:"description"`
	// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored.
	Devel *bool `pulumi:"devel"`
	// Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
	DisableCRDHooks *bool `pulumi:"disableCRDHooks"`
	// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
	DisableOpenapiValidation *bool `pulumi:"disableOpenapiValidation"`
	// Prevent hooks from running.
	DisableWebhooks *bool `pulumi:"disableWebhooks"`
	// Force resource update through delete/recreate if needed.
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Location of public keys used for verification. Used only if `verify` is true
	Keyring *string `pulumi:"keyring"`
	// Run helm lint when planning.
	Lint *bool `pulumi:"lint"`
	// The rendered manifests as JSON. Not yet supported.
	Manifest map[string]interface{} `pulumi:"manifest"`
	// Limit the maximum number of revisions saved per release. Use 0 for no limit.
	MaxHistory *int `pulumi:"maxHistory"`
	// Release name.
	Name *string `pulumi:"name"`
	// Namespace to install the release into.
	Namespace *string `pulumi:"namespace"`
	// Postrender command to run.
	Postrender *string `pulumi:"postrender"`
	// Perform pods restart during upgrade/rollback.
	RecreatePods *bool `pulumi:"recreatePods"`
	// If set, render subchart notes along with the parent.
	RenderSubchartNotes *bool `pulumi:"renderSubchartNotes"`
	// Re-use the given name, even if that name is already used. This is unsafe in production
	Replace *bool `pulumi:"replace"`
	// Specification defining the Helm chart repository to use.
	RepositoryOpts *RepositoryOpts `pulumi:"repositoryOpts"`
	// When upgrading, reset the values to the ones built into the chart.
	ResetValues *bool `pulumi:"resetValues"`
	// Names of resources created by the release grouped by "kind/version".
	ResourceNames map[string][]string `pulumi:"resourceNames"`
	// When upgrading, reuse the last release's values and merge in any overrides. If 'resetValues' is specified, this is ignored
	ReuseValues *bool `pulumi:"reuseValues"`
	// By default, the provider waits until all resources are in a ready state before marking the release as successful. Setting this to true will skip such await logic.
	SkipAwait *bool `pulumi:"skipAwait"`
	// If set, no CRDs will be installed. By default, CRDs are installed if not already present.
	SkipCrds *bool `pulumi:"skipCrds"`
	// Time in seconds to wait for any individual kubernetes operation.
	Timeout *int `pulumi:"timeout"`
	// List of assets (raw yaml files). Content is read and merged with values. Not yet supported.
	ValueYamlFiles []pulumi.AssetOrArchive `pulumi:"valueYamlFiles"`
	// Custom values set for the release.
	Values map[string]interface{} `pulumi:"values"`
	// Verify the package before installing it.
	Verify *bool `pulumi:"verify"`
	// Specify the exact chart version to install. If this is not specified, the latest version is installed.
	Version *string `pulumi:"version"`
	// Will wait until all Jobs have been completed before marking the release as successful. This is ignored if `skipAwait` is enabled.
	WaitForJobs *bool `pulumi:"waitForJobs"`
}

// ReleaseInput is an input type that accepts ReleaseArgs and ReleaseOutput values.
// You can construct a concrete instance of `ReleaseInput` via:
//
//	ReleaseArgs{...}
type ReleaseInput interface {
	pulumi.Input

	ToReleaseOutput() ReleaseOutput
	ToReleaseOutputWithContext(context.Context) ReleaseOutput
}

// A Release is an instance of a chart running in a Kubernetes cluster.
// A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.
// Note - Helm Release is currently in BETA and may change. Use in production environment is discouraged.
type ReleaseArgs struct {
	// If set, installation process purges chart on fail. `skipAwait` will be disabled automatically if atomic is used.
	Atomic pulumi.BoolPtrInput `pulumi:"atomic"`
	// Chart name to be installed. A path may be used.
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// Allow deletion of new resources created in this upgrade when upgrade fails.
	CleanupOnFail pulumi.BoolPtrInput `pulumi:"cleanupOnFail"`
	// Create the namespace if it does not exist.
	CreateNamespace pulumi.BoolPtrInput `pulumi:"createNamespace"`
	// Run helm dependency update before installing the chart.
	DependencyUpdate pulumi.BoolPtrInput `pulumi:"dependencyUpdate"`
	// Add a custom description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored.
	Devel pulumi.BoolPtrInput `pulumi:"devel"`
	// Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
	DisableCRDHooks pulumi.BoolPtrInput `pulumi:"disableCRDHooks"`
	// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
	DisableOpenapiValidation pulumi.BoolPtrInput `pulumi:"disableOpenapiValidation"`
	// Prevent hooks from running.
	DisableWebhooks pulumi.BoolPtrInput `pulumi:"disableWebhooks"`
	// Force resource update through delete/recreate if needed.
	ForceUpdate pulumi.BoolPtrInput `pulumi:"forceUpdate"`
	// Location of public keys used for verification. Used only if `verify` is true
	Keyring pulumi.StringPtrInput `pulumi:"keyring"`
	// Run helm lint when planning.
	Lint pulumi.BoolPtrInput `pulumi:"lint"`
	// The rendered manifests as JSON. Not yet supported.
	Manifest pulumi.MapInput `pulumi:"manifest"`
	// Limit the maximum number of revisions saved per release. Use 0 for no limit.
	MaxHistory pulumi.IntPtrInput `pulumi:"maxHistory"`
	// Release name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace to install the release into.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Postrender command to run.
	Postrender pulumi.StringPtrInput `pulumi:"postrender"`
	// Perform pods restart during upgrade/rollback.
	RecreatePods pulumi.BoolPtrInput `pulumi:"recreatePods"`
	// If set, render subchart notes along with the parent.
	RenderSubchartNotes pulumi.BoolPtrInput `pulumi:"renderSubchartNotes"`
	// Re-use the given name, even if that name is already used. This is unsafe in production
	Replace pulumi.BoolPtrInput `pulumi:"replace"`
	// Specification defining the Helm chart repository to use.
	RepositoryOpts RepositoryOptsPtrInput `pulumi:"repositoryOpts"`
	// When upgrading, reset the values to the ones built into the chart.
	ResetValues pulumi.BoolPtrInput `pulumi:"resetValues"`
	// Names of resources created by the release grouped by "kind/version".
	ResourceNames pulumi.StringArrayMapInput `pulumi:"resourceNames"`
	// When upgrading, reuse the last release's values and merge in any overrides. If 'resetValues' is specified, this is ignored
	ReuseValues pulumi.BoolPtrInput `pulumi:"reuseValues"`
	// By default, the provider waits until all resources are in a ready state before marking the release as successful. Setting this to true will skip such await logic.
	SkipAwait pulumi.BoolPtrInput `pulumi:"skipAwait"`
	// If set, no CRDs will be installed. By default, CRDs are installed if not already present.
	SkipCrds pulumi.BoolPtrInput `pulumi:"skipCrds"`
	// Time in seconds to wait for any individual kubernetes operation.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// List of assets (raw yaml files). Content is read and merged with values. Not yet supported.
	ValueYamlFiles pulumi.AssetOrArchiveArrayInput `pulumi:"valueYamlFiles"`
	// Custom values set for the release.
	Values pulumi.MapInput `pulumi:"values"`
	// Verify the package before installing it.
	Verify pulumi.BoolPtrInput `pulumi:"verify"`
	// Specify the exact chart version to install. If this is not specified, the latest version is installed.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// Will wait until all Jobs have been completed before marking the release as successful. This is ignored if `skipAwait` is enabled.
	WaitForJobs pulumi.BoolPtrInput `pulumi:"waitForJobs"`
}

func (ReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Release)(nil)).Elem()
}

func (i ReleaseArgs) ToReleaseOutput() ReleaseOutput {
	return i.ToReleaseOutputWithContext(context.Background())
}

func (i ReleaseArgs) ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseOutput)
}

func (i ReleaseArgs) ToReleasePtrOutput() ReleasePtrOutput {
	return i.ToReleasePtrOutputWithContext(context.Background())
}

func (i ReleaseArgs) ToReleasePtrOutputWithContext(ctx context.Context) ReleasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseOutput).ToReleasePtrOutputWithContext(ctx)
}

// ReleasePtrInput is an input type that accepts ReleaseArgs, ReleasePtr and ReleasePtrOutput values.
// You can construct a concrete instance of `ReleasePtrInput` via:
//
//	        ReleaseArgs{...}
//
//	or:
//
//	        nil
type ReleasePtrInput interface {
	pulumi.Input

	ToReleasePtrOutput() ReleasePtrOutput
	ToReleasePtrOutputWithContext(context.Context) ReleasePtrOutput
}

type releasePtrType ReleaseArgs

func ReleasePtr(v *ReleaseArgs) ReleasePtrInput {
	return (*releasePtrType)(v)
}

func (*releasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Release)(nil)).Elem()
}

func (i *releasePtrType) ToReleasePtrOutput() ReleasePtrOutput {
	return i.ToReleasePtrOutputWithContext(context.Background())
}

func (i *releasePtrType) ToReleasePtrOutputWithContext(ctx context.Context) ReleasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleasePtrOutput)
}

// A Release is an instance of a chart running in a Kubernetes cluster.
// A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.
// Note - Helm Release is currently in BETA and may change. Use in production environment is discouraged.
type ReleaseOutput struct{ *pulumi.OutputState }

func (ReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Release)(nil)).Elem()
}

func (o ReleaseOutput) ToReleaseOutput() ReleaseOutput {
	return o
}

func (o ReleaseOutput) ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput {
	return o
}

func (o ReleaseOutput) ToReleasePtrOutput() ReleasePtrOutput {
	return o.ToReleasePtrOutputWithContext(context.Background())
}

func (o ReleaseOutput) ToReleasePtrOutputWithContext(ctx context.Context) ReleasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Release) *Release {
		return &v
	}).(ReleasePtrOutput)
}

// If set, installation process purges chart on fail. `skipAwait` will be disabled automatically if atomic is used.
func (o ReleaseOutput) Atomic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.Atomic }).(pulumi.BoolPtrOutput)
}

// Chart name to be installed. A path may be used.
func (o ReleaseOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// Allow deletion of new resources created in this upgrade when upgrade fails.
func (o ReleaseOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.CleanupOnFail }).(pulumi.BoolPtrOutput)
}

// Create the namespace if it does not exist.
func (o ReleaseOutput) CreateNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.CreateNamespace }).(pulumi.BoolPtrOutput)
}

// Run helm dependency update before installing the chart.
func (o ReleaseOutput) DependencyUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.DependencyUpdate }).(pulumi.BoolPtrOutput)
}

// Add a custom description
func (o ReleaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored.
func (o ReleaseOutput) Devel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.Devel }).(pulumi.BoolPtrOutput)
}

// Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
func (o ReleaseOutput) DisableCRDHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.DisableCRDHooks }).(pulumi.BoolPtrOutput)
}

// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
func (o ReleaseOutput) DisableOpenapiValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.DisableOpenapiValidation }).(pulumi.BoolPtrOutput)
}

// Prevent hooks from running.
func (o ReleaseOutput) DisableWebhooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.DisableWebhooks }).(pulumi.BoolPtrOutput)
}

// Force resource update through delete/recreate if needed.
func (o ReleaseOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Location of public keys used for verification. Used only if `verify` is true
func (o ReleaseOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Keyring }).(pulumi.StringPtrOutput)
}

// Run helm lint when planning.
func (o ReleaseOutput) Lint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.Lint }).(pulumi.BoolPtrOutput)
}

// The rendered manifests as JSON. Not yet supported.
func (o ReleaseOutput) Manifest() pulumi.MapOutput {
	return o.ApplyT(func(v Release) map[string]interface{} { return v.Manifest }).(pulumi.MapOutput)
}

// Limit the maximum number of revisions saved per release. Use 0 for no limit.
func (o ReleaseOutput) MaxHistory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Release) *int { return v.MaxHistory }).(pulumi.IntPtrOutput)
}

// Release name.
func (o ReleaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace to install the release into.
func (o ReleaseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Postrender command to run.
func (o ReleaseOutput) Postrender() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Postrender }).(pulumi.StringPtrOutput)
}

// Perform pods restart during upgrade/rollback.
func (o ReleaseOutput) RecreatePods() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.RecreatePods }).(pulumi.BoolPtrOutput)
}

// If set, render subchart notes along with the parent.
func (o ReleaseOutput) RenderSubchartNotes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.RenderSubchartNotes }).(pulumi.BoolPtrOutput)
}

// Re-use the given name, even if that name is already used. This is unsafe in production
func (o ReleaseOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.Replace }).(pulumi.BoolPtrOutput)
}

// Specification defining the Helm chart repository to use.
func (o ReleaseOutput) RepositoryOpts() RepositoryOptsPtrOutput {
	return o.ApplyT(func(v Release) *RepositoryOpts { return v.RepositoryOpts }).(RepositoryOptsPtrOutput)
}

// When upgrading, reset the values to the ones built into the chart.
func (o ReleaseOutput) ResetValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.ResetValues }).(pulumi.BoolPtrOutput)
}

// Names of resources created by the release grouped by "kind/version".
func (o ReleaseOutput) ResourceNames() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v Release) map[string][]string { return v.ResourceNames }).(pulumi.StringArrayMapOutput)
}

// When upgrading, reuse the last release's values and merge in any overrides. If 'resetValues' is specified, this is ignored
func (o ReleaseOutput) ReuseValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.ReuseValues }).(pulumi.BoolPtrOutput)
}

// By default, the provider waits until all resources are in a ready state before marking the release as successful. Setting this to true will skip such await logic.
func (o ReleaseOutput) SkipAwait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.SkipAwait }).(pulumi.BoolPtrOutput)
}

// If set, no CRDs will be installed. By default, CRDs are installed if not already present.
func (o ReleaseOutput) SkipCrds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.SkipCrds }).(pulumi.BoolPtrOutput)
}

// Time in seconds to wait for any individual kubernetes operation.
func (o ReleaseOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Release) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// List of assets (raw yaml files). Content is read and merged with values. Not yet supported.
func (o ReleaseOutput) ValueYamlFiles() pulumi.AssetOrArchiveArrayOutput {
	return o.ApplyT(func(v Release) []pulumi.AssetOrArchive { return v.ValueYamlFiles }).(pulumi.AssetOrArchiveArrayOutput)
}

// Custom values set for the release.
func (o ReleaseOutput) Values() pulumi.MapOutput {
	return o.ApplyT(func(v Release) map[string]interface{} { return v.Values }).(pulumi.MapOutput)
}

// Verify the package before installing it.
func (o ReleaseOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.Verify }).(pulumi.BoolPtrOutput)
}

// Specify the exact chart version to install. If this is not specified, the latest version is installed.
func (o ReleaseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// Will wait until all Jobs have been completed before marking the release as successful. This is ignored if `skipAwait` is enabled.
func (o ReleaseOutput) WaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.WaitForJobs }).(pulumi.BoolPtrOutput)
}

type ReleasePtrOutput struct{ *pulumi.OutputState }

func (ReleasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Release)(nil)).Elem()
}

func (o ReleasePtrOutput) ToReleasePtrOutput() ReleasePtrOutput {
	return o
}

func (o ReleasePtrOutput) ToReleasePtrOutputWithContext(ctx context.Context) ReleasePtrOutput {
	return o
}

func (o ReleasePtrOutput) Elem() ReleaseOutput {
	return o.ApplyT(func(v *Release) Release {
		if v != nil {
			return *v
		}
		var ret Release
		return ret
	}).(ReleaseOutput)
}

// If set, installation process purges chart on fail. `skipAwait` will be disabled automatically if atomic is used.
func (o ReleasePtrOutput) Atomic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.Atomic
	}).(pulumi.BoolPtrOutput)
}

// Chart name to be installed. A path may be used.
func (o ReleasePtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// Allow deletion of new resources created in this upgrade when upgrade fails.
func (o ReleasePtrOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.CleanupOnFail
	}).(pulumi.BoolPtrOutput)
}

// Create the namespace if it does not exist.
func (o ReleasePtrOutput) CreateNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.CreateNamespace
	}).(pulumi.BoolPtrOutput)
}

// Run helm dependency update before installing the chart.
func (o ReleasePtrOutput) DependencyUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.DependencyUpdate
	}).(pulumi.BoolPtrOutput)
}

// Add a custom description
func (o ReleasePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored.
func (o ReleasePtrOutput) Devel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.Devel
	}).(pulumi.BoolPtrOutput)
}

// Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
func (o ReleasePtrOutput) DisableCRDHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.DisableCRDHooks
	}).(pulumi.BoolPtrOutput)
}

// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
func (o ReleasePtrOutput) DisableOpenapiValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.DisableOpenapiValidation
	}).(pulumi.BoolPtrOutput)
}

// Prevent hooks from running.
func (o ReleasePtrOutput) DisableWebhooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWebhooks
	}).(pulumi.BoolPtrOutput)
}

// Force resource update through delete/recreate if needed.
func (o ReleasePtrOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUpdate
	}).(pulumi.BoolPtrOutput)
}

// Location of public keys used for verification. Used only if `verify` is true
func (o ReleasePtrOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Keyring
	}).(pulumi.StringPtrOutput)
}

// Run helm lint when planning.
func (o ReleasePtrOutput) Lint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.Lint
	}).(pulumi.BoolPtrOutput)
}

// The rendered manifests as JSON. Not yet supported.
func (o ReleasePtrOutput) Manifest() pulumi.MapOutput {
	return o.ApplyT(func(v *Release) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Manifest
	}).(pulumi.MapOutput)
}

// Limit the maximum number of revisions saved per release. Use 0 for no limit.
func (o ReleasePtrOutput) MaxHistory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Release) *int {
		if v == nil {
			return nil
		}
		return v.MaxHistory
	}).(pulumi.IntPtrOutput)
}

// Release name.
func (o ReleasePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace to install the release into.
func (o ReleasePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Postrender command to run.
func (o ReleasePtrOutput) Postrender() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Postrender
	}).(pulumi.StringPtrOutput)
}

// Perform pods restart during upgrade/rollback.
func (o ReleasePtrOutput) RecreatePods() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.RecreatePods
	}).(pulumi.BoolPtrOutput)
}

// If set, render subchart notes along with the parent.
func (o ReleasePtrOutput) RenderSubchartNotes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.RenderSubchartNotes
	}).(pulumi.BoolPtrOutput)
}

// Re-use the given name, even if that name is already used. This is unsafe in production
func (o ReleasePtrOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.Replace
	}).(pulumi.BoolPtrOutput)
}

// Specification defining the Helm chart repository to use.
func (o ReleasePtrOutput) RepositoryOpts() RepositoryOptsPtrOutput {
	return o.ApplyT(func(v *Release) *RepositoryOpts {
		if v == nil {
			return nil
		}
		return v.RepositoryOpts
	}).(RepositoryOptsPtrOutput)
}

// When upgrading, reset the values to the ones built into the chart.
func (o ReleasePtrOutput) ResetValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.ResetValues
	}).(pulumi.BoolPtrOutput)
}

// Names of resources created by the release grouped by "kind/version".
func (o ReleasePtrOutput) ResourceNames() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *Release) map[string][]string {
		if v == nil {
			return nil
		}
		return v.ResourceNames
	}).(pulumi.StringArrayMapOutput)
}

// When upgrading, reuse the last release's values and merge in any overrides. If 'resetValues' is specified, this is ignored
func (o ReleasePtrOutput) ReuseValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.ReuseValues
	}).(pulumi.BoolPtrOutput)
}

// By default, the provider waits until all resources are in a ready state before marking the release as successful. Setting this to true will skip such await logic.
func (o ReleasePtrOutput) SkipAwait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.SkipAwait
	}).(pulumi.BoolPtrOutput)
}

// If set, no CRDs will be installed. By default, CRDs are installed if not already present.
func (o ReleasePtrOutput) SkipCrds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.SkipCrds
	}).(pulumi.BoolPtrOutput)
}

// Time in seconds to wait for any individual kubernetes operation.
func (o ReleasePtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Release) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// List of assets (raw yaml files). Content is read and merged with values. Not yet supported.
func (o ReleasePtrOutput) ValueYamlFiles() pulumi.AssetOrArchiveArrayOutput {
	return o.ApplyT(func(v *Release) []pulumi.AssetOrArchive {
		if v == nil {
			return nil
		}
		return v.ValueYamlFiles
	}).(pulumi.AssetOrArchiveArrayOutput)
}

// Custom values set for the release.
func (o ReleasePtrOutput) Values() pulumi.MapOutput {
	return o.ApplyT(func(v *Release) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.MapOutput)
}

// Verify the package before installing it.
func (o ReleasePtrOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(pulumi.BoolPtrOutput)
}

// Specify the exact chart version to install. If this is not specified, the latest version is installed.
func (o ReleasePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Will wait until all Jobs have been completed before marking the release as successful. This is ignored if `skipAwait` is enabled.
func (o ReleasePtrOutput) WaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.WaitForJobs
	}).(pulumi.BoolPtrOutput)
}

type ReleaseStatus struct {
	// The version number of the application being deployed.
	AppVersion string `pulumi:"appVersion"`
	// The name of the chart.
	Chart string `pulumi:"chart"`
	// Name is the name of the release.
	Name string `pulumi:"name"`
	// Namespace is the kubernetes namespace of the release.
	Namespace string `pulumi:"namespace"`
	// Version is an int32 which represents the version of the release.
	Revision int `pulumi:"revision"`
	// Status of the release.
	Status string `pulumi:"status"`
	// A SemVer 2 conformant version string of the chart.
	Version string `pulumi:"version"`
}

// ReleaseStatusInput is an input type that accepts ReleaseStatusArgs and ReleaseStatusOutput values.
// You can construct a concrete instance of `ReleaseStatusInput` via:
//
//	ReleaseStatusArgs{...}
type ReleaseStatusInput interface {
	pulumi.Input

	ToReleaseStatusOutput() ReleaseStatusOutput
	ToReleaseStatusOutputWithContext(context.Context) ReleaseStatusOutput
}

type ReleaseStatusArgs struct {
	// The version number of the application being deployed.
	AppVersion pulumi.StringInput `pulumi:"appVersion"`
	// The name of the chart.
	Chart pulumi.StringInput `pulumi:"chart"`
	// Name is the name of the release.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace is the kubernetes namespace of the release.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// Version is an int32 which represents the version of the release.
	Revision pulumi.IntInput `pulumi:"revision"`
	// Status of the release.
	Status pulumi.StringInput `pulumi:"status"`
	// A SemVer 2 conformant version string of the chart.
	Version pulumi.StringInput `pulumi:"version"`
}

func (ReleaseStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseStatus)(nil)).Elem()
}

func (i ReleaseStatusArgs) ToReleaseStatusOutput() ReleaseStatusOutput {
	return i.ToReleaseStatusOutputWithContext(context.Background())
}

func (i ReleaseStatusArgs) ToReleaseStatusOutputWithContext(ctx context.Context) ReleaseStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseStatusOutput)
}

type ReleaseStatusOutput struct{ *pulumi.OutputState }

func (ReleaseStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseStatus)(nil)).Elem()
}

func (o ReleaseStatusOutput) ToReleaseStatusOutput() ReleaseStatusOutput {
	return o
}

func (o ReleaseStatusOutput) ToReleaseStatusOutputWithContext(ctx context.Context) ReleaseStatusOutput {
	return o
}

// The version number of the application being deployed.
func (o ReleaseStatusOutput) AppVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseStatus) string { return v.AppVersion }).(pulumi.StringOutput)
}

// The name of the chart.
func (o ReleaseStatusOutput) Chart() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseStatus) string { return v.Chart }).(pulumi.StringOutput)
}

// Name is the name of the release.
func (o ReleaseStatusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseStatus) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace is the kubernetes namespace of the release.
func (o ReleaseStatusOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseStatus) string { return v.Namespace }).(pulumi.StringOutput)
}

// Version is an int32 which represents the version of the release.
func (o ReleaseStatusOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v ReleaseStatus) int { return v.Revision }).(pulumi.IntOutput)
}

// Status of the release.
func (o ReleaseStatusOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseStatus) string { return v.Status }).(pulumi.StringOutput)
}

// A SemVer 2 conformant version string of the chart.
func (o ReleaseStatusOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseStatus) string { return v.Version }).(pulumi.StringOutput)
}

// Specification defining the Helm chart repository to use.
type RepositoryOpts struct {
	// The Repository's CA File
	CaFile *string `pulumi:"caFile"`
	// The repository's cert file
	CertFile *string `pulumi:"certFile"`
	// The repository's cert key file
	KeyFile *string `pulumi:"keyFile"`
	// Password for HTTP basic authentication
	Password *string `pulumi:"password"`
	// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
	Repo *string `pulumi:"repo"`
	// Username for HTTP basic authentication
	Username *string `pulumi:"username"`
}

// RepositoryOptsInput is an input type that accepts RepositoryOptsArgs and RepositoryOptsOutput values.
// You can construct a concrete instance of `RepositoryOptsInput` via:
//
//	RepositoryOptsArgs{...}
type RepositoryOptsInput interface {
	pulumi.Input

	ToRepositoryOptsOutput() RepositoryOptsOutput
	ToRepositoryOptsOutputWithContext(context.Context) RepositoryOptsOutput
}

// Specification defining the Helm chart repository to use.
type RepositoryOptsArgs struct {
	// The Repository's CA File
	CaFile pulumi.StringPtrInput `pulumi:"caFile"`
	// The repository's cert file
	CertFile pulumi.StringPtrInput `pulumi:"certFile"`
	// The repository's cert key file
	KeyFile pulumi.StringPtrInput `pulumi:"keyFile"`
	// Password for HTTP basic authentication
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
	Repo pulumi.StringPtrInput `pulumi:"repo"`
	// Username for HTTP basic authentication
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (RepositoryOptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryOpts)(nil)).Elem()
}

func (i RepositoryOptsArgs) ToRepositoryOptsOutput() RepositoryOptsOutput {
	return i.ToRepositoryOptsOutputWithContext(context.Background())
}

func (i RepositoryOptsArgs) ToRepositoryOptsOutputWithContext(ctx context.Context) RepositoryOptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOptsOutput)
}

func (i RepositoryOptsArgs) ToRepositoryOptsPtrOutput() RepositoryOptsPtrOutput {
	return i.ToRepositoryOptsPtrOutputWithContext(context.Background())
}

func (i RepositoryOptsArgs) ToRepositoryOptsPtrOutputWithContext(ctx context.Context) RepositoryOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOptsOutput).ToRepositoryOptsPtrOutputWithContext(ctx)
}

// RepositoryOptsPtrInput is an input type that accepts RepositoryOptsArgs, RepositoryOptsPtr and RepositoryOptsPtrOutput values.
// You can construct a concrete instance of `RepositoryOptsPtrInput` via:
//
//	        RepositoryOptsArgs{...}
//
//	or:
//
//	        nil
type RepositoryOptsPtrInput interface {
	pulumi.Input

	ToRepositoryOptsPtrOutput() RepositoryOptsPtrOutput
	ToRepositoryOptsPtrOutputWithContext(context.Context) RepositoryOptsPtrOutput
}

type repositoryOptsPtrType RepositoryOptsArgs

func RepositoryOptsPtr(v *RepositoryOptsArgs) RepositoryOptsPtrInput {
	return (*repositoryOptsPtrType)(v)
}

func (*repositoryOptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryOpts)(nil)).Elem()
}

func (i *repositoryOptsPtrType) ToRepositoryOptsPtrOutput() RepositoryOptsPtrOutput {
	return i.ToRepositoryOptsPtrOutputWithContext(context.Background())
}

func (i *repositoryOptsPtrType) ToRepositoryOptsPtrOutputWithContext(ctx context.Context) RepositoryOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOptsPtrOutput)
}

// Specification defining the Helm chart repository to use.
type RepositoryOptsOutput struct{ *pulumi.OutputState }

func (RepositoryOptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryOpts)(nil)).Elem()
}

func (o RepositoryOptsOutput) ToRepositoryOptsOutput() RepositoryOptsOutput {
	return o
}

func (o RepositoryOptsOutput) ToRepositoryOptsOutputWithContext(ctx context.Context) RepositoryOptsOutput {
	return o
}

func (o RepositoryOptsOutput) ToRepositoryOptsPtrOutput() RepositoryOptsPtrOutput {
	return o.ToRepositoryOptsPtrOutputWithContext(context.Background())
}

func (o RepositoryOptsOutput) ToRepositoryOptsPtrOutputWithContext(ctx context.Context) RepositoryOptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryOpts) *RepositoryOpts {
		return &v
	}).(RepositoryOptsPtrOutput)
}

// The Repository's CA File
func (o RepositoryOptsOutput) CaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.CaFile }).(pulumi.StringPtrOutput)
}

// The repository's cert file
func (o RepositoryOptsOutput) CertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.CertFile }).(pulumi.StringPtrOutput)
}

// The repository's cert key file
func (o RepositoryOptsOutput) KeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.KeyFile }).(pulumi.StringPtrOutput)
}

// Password for HTTP basic authentication
func (o RepositoryOptsOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
func (o RepositoryOptsOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.Repo }).(pulumi.StringPtrOutput)
}

// Username for HTTP basic authentication
func (o RepositoryOptsOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type RepositoryOptsPtrOutput struct{ *pulumi.OutputState }

func (RepositoryOptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryOpts)(nil)).Elem()
}

func (o RepositoryOptsPtrOutput) ToRepositoryOptsPtrOutput() RepositoryOptsPtrOutput {
	return o
}

func (o RepositoryOptsPtrOutput) ToRepositoryOptsPtrOutputWithContext(ctx context.Context) RepositoryOptsPtrOutput {
	return o
}

func (o RepositoryOptsPtrOutput) Elem() RepositoryOptsOutput {
	return o.ApplyT(func(v *RepositoryOpts) RepositoryOpts {
		if v != nil {
			return *v
		}
		var ret RepositoryOpts
		return ret
	}).(RepositoryOptsOutput)
}

// The Repository's CA File
func (o RepositoryOptsPtrOutput) CaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.CaFile
	}).(pulumi.StringPtrOutput)
}

// The repository's cert file
func (o RepositoryOptsPtrOutput) CertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.CertFile
	}).(pulumi.StringPtrOutput)
}

// The repository's cert key file
func (o RepositoryOptsPtrOutput) KeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.KeyFile
	}).(pulumi.StringPtrOutput)
}

// Password for HTTP basic authentication
func (o RepositoryOptsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
func (o RepositoryOptsPtrOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.Repo
	}).(pulumi.StringPtrOutput)
}

// Username for HTTP basic authentication
func (o RepositoryOptsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerCaInjectorInput)(nil)).Elem(), CertManagerCaInjectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerCaInjectorPtrInput)(nil)).Elem(), CertManagerCaInjectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerGlobalInput)(nil)).Elem(), CertManagerGlobalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerGlobalPtrInput)(nil)).Elem(), CertManagerGlobalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerGlobalLeaderElectionInput)(nil)).Elem(), CertManagerGlobalLeaderElectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerGlobalLeaderElectionPtrInput)(nil)).Elem(), CertManagerGlobalLeaderElectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerGlobalPodSecurityPolicyInput)(nil)).Elem(), CertManagerGlobalPodSecurityPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerGlobalPodSecurityPolicyPtrInput)(nil)).Elem(), CertManagerGlobalPodSecurityPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerGlobalRbacInput)(nil)).Elem(), CertManagerGlobalRbacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerGlobalRbacPtrInput)(nil)).Elem(), CertManagerGlobalRbacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerImageInput)(nil)).Elem(), CertManagerImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerImagePtrInput)(nil)).Elem(), CertManagerImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerIngressShimInput)(nil)).Elem(), CertManagerIngressShimArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerIngressShimPtrInput)(nil)).Elem(), CertManagerIngressShimArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerPrometheusInput)(nil)).Elem(), CertManagerPrometheusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerPrometheusPtrInput)(nil)).Elem(), CertManagerPrometheusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerPrometheusServiceMonitorInput)(nil)).Elem(), CertManagerPrometheusServiceMonitorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerPrometheusServiceMonitorPtrInput)(nil)).Elem(), CertManagerPrometheusServiceMonitorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerServiceAccountInput)(nil)).Elem(), CertManagerServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerServiceAccountPtrInput)(nil)).Elem(), CertManagerServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerStartupAPICheckInput)(nil)).Elem(), CertManagerStartupAPICheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerStartupAPICheckPtrInput)(nil)).Elem(), CertManagerStartupAPICheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerStartupAPICheckRBACInput)(nil)).Elem(), CertManagerStartupAPICheckRBACArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerStartupAPICheckRBACPtrInput)(nil)).Elem(), CertManagerStartupAPICheckRBACArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerWebhookInput)(nil)).Elem(), CertManagerWebhookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerWebhookPtrInput)(nil)).Elem(), CertManagerWebhookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerWebhookURLInput)(nil)).Elem(), CertManagerWebhookURLArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerWebhookURLPtrInput)(nil)).Elem(), CertManagerWebhookURLArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseInput)(nil)).Elem(), ReleaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleasePtrInput)(nil)).Elem(), ReleaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseStatusInput)(nil)).Elem(), ReleaseStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryOptsInput)(nil)).Elem(), RepositoryOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryOptsPtrInput)(nil)).Elem(), RepositoryOptsArgs{})
	pulumi.RegisterOutputType(CertManagerCaInjectorOutput{})
	pulumi.RegisterOutputType(CertManagerCaInjectorPtrOutput{})
	pulumi.RegisterOutputType(CertManagerGlobalOutput{})
	pulumi.RegisterOutputType(CertManagerGlobalPtrOutput{})
	pulumi.RegisterOutputType(CertManagerGlobalLeaderElectionOutput{})
	pulumi.RegisterOutputType(CertManagerGlobalLeaderElectionPtrOutput{})
	pulumi.RegisterOutputType(CertManagerGlobalPodSecurityPolicyOutput{})
	pulumi.RegisterOutputType(CertManagerGlobalPodSecurityPolicyPtrOutput{})
	pulumi.RegisterOutputType(CertManagerGlobalRbacOutput{})
	pulumi.RegisterOutputType(CertManagerGlobalRbacPtrOutput{})
	pulumi.RegisterOutputType(CertManagerImageOutput{})
	pulumi.RegisterOutputType(CertManagerImagePtrOutput{})
	pulumi.RegisterOutputType(CertManagerIngressShimOutput{})
	pulumi.RegisterOutputType(CertManagerIngressShimPtrOutput{})
	pulumi.RegisterOutputType(CertManagerPrometheusOutput{})
	pulumi.RegisterOutputType(CertManagerPrometheusPtrOutput{})
	pulumi.RegisterOutputType(CertManagerPrometheusServiceMonitorOutput{})
	pulumi.RegisterOutputType(CertManagerPrometheusServiceMonitorPtrOutput{})
	pulumi.RegisterOutputType(CertManagerServiceAccountOutput{})
	pulumi.RegisterOutputType(CertManagerServiceAccountPtrOutput{})
	pulumi.RegisterOutputType(CertManagerStartupAPICheckOutput{})
	pulumi.RegisterOutputType(CertManagerStartupAPICheckPtrOutput{})
	pulumi.RegisterOutputType(CertManagerStartupAPICheckRBACOutput{})
	pulumi.RegisterOutputType(CertManagerStartupAPICheckRBACPtrOutput{})
	pulumi.RegisterOutputType(CertManagerWebhookOutput{})
	pulumi.RegisterOutputType(CertManagerWebhookPtrOutput{})
	pulumi.RegisterOutputType(CertManagerWebhookURLOutput{})
	pulumi.RegisterOutputType(CertManagerWebhookURLPtrOutput{})
	pulumi.RegisterOutputType(ReleaseOutput{})
	pulumi.RegisterOutputType(ReleasePtrOutput{})
	pulumi.RegisterOutputType(ReleaseStatusOutput{})
	pulumi.RegisterOutputType(RepositoryOptsOutput{})
	pulumi.RegisterOutputType(RepositoryOptsPtrOutput{})
}
